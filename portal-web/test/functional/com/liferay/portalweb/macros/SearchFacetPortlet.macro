definition {

	macro checkFacet {
		FormFields.enableCheckbox(fieldName = ${facetValueName});
	}

	macro checkFacetAndViewURL {
		SearchFacetPortlet.checkFacet(facetValueName = ${facetValueName});

		var searchURL = SearchFacetPortlet.generateFacetCheckedURL(
			facetName = ${facetName},
			facetValue = ${facetValue},
			facetValueName = ${facetValueName},
			searchPage = ${searchPage},
			searchTerm = ${searchTerm},
			searchURL = ${searchURL});

		AssertLocation(value1 = ${searchURL});

		return ${searchURL};
	}

	macro clearAllFacetsAndViewURL {
		while (IsElementPresent(locator1 = "SearchResults#FACET_PORTLET_CLEAR_GENERIC")) {
			var facetNameBuilder = selenium.getText("SearchResults#FACET_PORTLET_WITH_CLEAR_BUTTON");

			var facetNameBuilder = StringUtil.toLowerCase(${facetNameBuilder});

			var firstWord = StringUtil.extractFirst(${facetNameBuilder}, " ");
			var lastWord = StringUtil.extractLast(${facetNameBuilder}, " ");
			var firstWord = StringUtil.upperCaseFirstLetter(${firstWord});
			var lastWord = StringUtil.upperCaseFirstLetter(${lastWord});

			var facetName = StringUtil.concat(${firstWord}, " ${lastWord}");

			var searchURL = SearchFacetPortlet.clearFacetAndViewURL(
				facetName = ${facetName},
				searchURL = ${searchURL});
		}

		return ${searchURL};
	}

	macro clearFacet {
		if (isSet(facetName)) {
			var facetIDName = StringUtil.replace(${facetName}, " ", "");

			AssertClick.assertPartialTextClickAt(
				key_facetIDName = ${facetIDName},
				locator1 = "SearchResults#FACET_PORTLET_CLEAR_SPECIFIC",
				value1 = "Clear");
		}
		else {
			AssertClick.assertPartialTextClickAt(
				locator1 = "SearchResults#FACET_PORTLET_CLEAR_GENERIC",
				value1 = "Clear");
		}
	}

	macro clearFacetAndViewURL {
		if (isSet(facetName)) {
			SearchFacetPortlet.clearFacet(facetName = ${facetName});

			var searchURL = SearchFacetPortlet.generateFacetClearedURL(
				facetName = ${facetName},
				searchURL = ${searchURL});

			AssertLocation(value1 = ${searchURL});

			return ${searchURL};
		}
		else {
			SearchFacetPortlet.clearFacet();
		}
	}

	macro configureCustomFacet {
		Portlet.gotoPortletOptions(
			portletName = "Custom Facet",
			portletOption = "Configuration");

		SelectFrame(locator1 = "IFrame#CONFIGURATION");

		if (isSet(aggregationField)) {
			Type(
				locator1 = "SearchResults#CUSTOM_FACET_CONFIG_AGGREGATION_FIELD",
				value1 = ${aggregationField});
		}

		if (isSet(customParameterName)) {
			Type(
				key_fieldLabel = "Custom Parameter Name",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = ${customParameterName});
		}

		if (isSet(customHeading)) {
			Type(
				key_fieldLabel = "Custom Heading",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = ${customHeading});
		}

		PortletEntry.save();

		IFrame.closeFrame();
	}

	macro generateFacetCheckedURL {
		if (!(isSet(searchURL))) {
			var searchURL = SearchPortlets.getSearchTermURL(
				searchPage = ${searchPage},
				searchTerm = ${searchTerm});
		}

		if (${facetName} == "Type Facet") {
			var facetValue = SearchFacetPortlet.getFacetTypeValue(facetTypeValueName = ${facetValueName});
		}
		else if (${facetName} == "User Facet") {
			var facetValue = SearchFacetPortlet.getUserFacetTermURLValue(userFacetTerm = ${facetValueName});
		}
		else if (!(isSet(facetValue))) {
			var facetValue = ${facetValueName};
		}

		var searchURLList = StringUtil.replace(${searchURL}, "&", ",");
		var facetValue = StringUtil.replace(${facetValue}, " ", "%20");
		var facetURLName = StringUtil.replace(${facetName}, " Facet", "");

		var facetURLName = StringUtil.toLowerCase(${facetURLName});
		var facetValueList = ${facetValue};

		for (var facetKeyValuePair : list ${searchURLList}) {
			if (contains(${facetKeyValuePair}, ${facetURLName})) {
				var facetKeyValue = StringUtil.stripBetween(${facetKeyValuePair}, ${facetURLName}, "=");

				var facetValueList = StringUtil.add(${facetValueList}, ${facetKeyValue});
				var searchURL = StringUtil.stripBetween(${searchURL}, "&${facetURLName}", ${facetKeyValue});
				var facetURLNameFound = "true";
			}
		}

		if (${facetURLNameFound} == "true") {
			var facetValueList = RegexUtil.replace(${facetValueList}, "(.*),$", 1);

			var facetValueList = ListUtil.sort(${facetValueList});

			for (var facetValueListValue : list ${facetValueList}) {
				var searchURL = "${searchURL}&${facetURLName}=${facetValueListValue}";
			}
		}
		else {
			var searchURL = "${searchURL}&${facetURLName}=${facetValue}";
		}

		return ${searchURL};
	}

	macro generateFacetClearedURL {
		var facetURLName = StringUtil.replace(${facetName}, " Facet", "");

		var facetURLName = StringUtil.toLowerCase(${facetURLName});

		var beforeFacetGroup = RegexUtil.replace(${searchURL}, "^(.*?)((?:&${facetURLName}[^&]+)+)(.*)", 1);
		var afterFacetGroup = RegexUtil.replace(${searchURL}, "^(.*?)((?:&${facetURLName}[^&]+)+)(.*)", 3);

		var searchURL = "${beforeFacetGroup}${afterFacetGroup}";

		return ${searchURL};
	}

	macro generateFacetUncheckedURL {
		if (${facetName} == "Type Facet") {
			var facetValue = SearchFacetPortlet.getFacetTypeValue(facetTypeValueName = ${facetValueName});
		}
		else if (${facetName} == "User Facet") {
			var facetValue = SearchFacetPortlet.getUserFacetTermURLValue(userFacetTerm = ${facetValueName});
		}
		else if (!(isSet(facetValue))) {
			var facetValue = ${facetValueName};
		}

		var facetURLName = StringUtil.replace(${facetName}, " Facet", "");

		var facetURLName = StringUtil.toLowerCase(${facetURLName});

		var beforeFacetGroup = RegexUtil.replace(${searchURL}, "^(.*?)((?:&${facetURLName}[^&]+)+)(.*)", 1);
		var facetGroup = RegexUtil.replace(${searchURL}, "^(.*?)((?:&${facetURLName}[^&]+)+)(.*)", 2);
		var afterFacetGroup = RegexUtil.replace(${searchURL}, "^(.*?)((?:&${facetURLName}[^&]+)+)(.*)", 3);
		var facetValue = StringUtil.replace(${facetValue}, " ", "%20");
		var facetGroupList = ${facetGroup};

		while (${facetValueFound} != "true") {
			var facetKeyValuePair = RegexUtil.replace(${facetGroupList}, "(&[^&]+)(.*)", 1);

			if (contains(${facetKeyValuePair}, ${facetValue})) {
				var facetGroup = StringUtil.replaceFirst(${facetGroup}, ${facetKeyValuePair}, "");
				var facetValueFound = "true";
			}
			else {
				var facetGroupList = StringUtil.replaceFirst(${facetGroupList}, ${facetKeyValuePair}, "");
			}
		}

		var searchURL = "${beforeFacetGroup}${afterFacetGroup}${facetGroup}";

		return ${searchURL};
	}

	macro getFacetTypeValue {
		if (contains(${facetTypeValueName}, "Blogs")) {
			var facetTypeValue = "com.liferay.blogs.model.BlogsEntry";
			var facetValueFound = "true";
		}

		if (contains(${facetTypeValueName}, "Document")) {
			var facetTypeValue = "com.liferay.document.library.kernel.model.DLFileEntry";
			var facetValueFound = "true";
		}

		if (contains(${facetTypeValueName}, "Web Content Article")) {
			var facetTypeValue = "com.liferay.journal.model.JournalArticle";
			var facetValueFound = "true";
		}

		if (contains(${facetTypeValueName}, "Web Content Folder")) {
			var facetTypeValue = "com.liferay.journal.model.JournalArticle";
			var facetValueFound = "true";
		}

		if (${facetValueFound} != "true") {
			fail("Type Facet term URL value has not been set correctly.");
		}

		return ${facetTypeValue};
	}

	macro getUserFacetTermURLValue {
		var firstName = StringUtil.extractFirst(${userFacetTerm}, " ");

		var userFacetTermURLValue = JSONUserGetter.getUserIdByFirstName(firstName = ${firstName});

		return ${userFacetTermURLValue};
	}

	macro moveAssetTypesToAvailable {
		Portlet.gotoPortletOptions(
			portletName = "Type Facet",
			portletOption = "Configuration");

		SelectFrame(locator1 = "IFrame#CONFIGURATION");

		for (var assetType : list ${assetType}) {
			AssertClick(
				locator1 = "Search#TYPE_FACET_CURRENT_ASSET_TYPE",
				value1 = ${assetType});

			Click(locator1 = "Button#MOVE_CURRENT_TO_AVAILABLE");

			AssertTextEquals.assertPartialText(
				locator1 = "Search#TYPE_FACET_AVAILABLE_ASSET_TYPE",
				value1 = ${assetType});
		}

		PortletEntry.save();

		IFrame.closeFrame();
	}

	macro uncheckFacet {
		FormFields.disableCheckbox(fieldName = ${facetValueName});
	}

	macro uncheckFacetAndViewURL {
		SearchFacetPortlet.uncheckFacet(facetValueName = ${facetValueName});

		var searchURL = SearchFacetPortlet.generateFacetUncheckedURL(
			facetName = ${facetName},
			facetValue = ${facetValue},
			facetValueName = ${facetValueName},
			searchURL = ${searchURL});

		AssertLocation(value1 = ${searchURL});

		return ${searchURL};
	}

	macro updateFacetConfiguration {
		Portlet.gotoPortletOptions(
			portletName = ${portletName},
			portletOption = "Configuration");

		WaitForLiferayEvent.initializeLiferayEventLog();

		SelectFrameTop();

		SelectFrame(locator1 = "IFrame#CONFIGURATION");

		if (isSet(sortOption)) {
			Select(
				key_fieldLabel = "Order Terms By",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = ${sortOption});
		}

		if (isSet(displayTemplate)) {
			Select(
				key_fieldLabel = "Display Template",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = ${displayTemplate});
		}

		if (isSet(parameterName)) {
			FormFields.editText(
				fieldName = "parameterName",
				fieldValue = ${parameterName});
		}

		if (isSet(maxTerms)) {
			FormFields.editText(
				fieldName = "maxTerms",
				fieldValue = ${maxTerms});
		}

		if (isSet(frequencyThreshold)) {
			FormFields.editText(
				fieldName = "frequencyThreshold",
				fieldValue = ${frequencyThreshold});
		}

		if (${displayFrequencies} == "disable") {
			FormFields.disableCheckbox(fieldName = "frequenciesVisible");
		}

		PortletEntry.save();

		IFrame.closeFrame();
	}

	macro viewFacetItemsSpecificOrder {
		var resultOrder = 0;

		if (${portletName} == "Modified Facet") {
			for (var facetItem : list ${facetList}) {
				var resultOrder = ${resultOrder} + 1;

				AssertTextEquals.assertPartialText(
					locator1 = "Search#MODIFIED_FACET_SPECIFIC_ORDER",
					resultOrder = ${resultOrder},
					value1 = ${facetItem});
			}
		}
		else {
			for (var facetItem : list ${facetList}) {
				var resultOrder = ${resultOrder} + 1;

				AssertElementPresent(
					key_facetItem = ${facetItem},
					key_resultOrder = ${resultOrder},
					locator1 = "SearchResults#FACET_PORTLET_ITEMS_SPECIFIC_ORDER");
			}
		}
	}

}
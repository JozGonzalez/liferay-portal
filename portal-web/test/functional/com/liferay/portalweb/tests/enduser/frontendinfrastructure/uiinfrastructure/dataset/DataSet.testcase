@component-name = "portal-frontend-infrastructure"
definition {

	property custom.properties = "feature.flag.LPS-164563=true${line.separator}feature.flag.LPS-167253=true";
	property portal.acceptance = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Frontend Data Set";
	property testray.main.component.name = "Frontend Data Set";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		task ("Given access to the Data Sets admin page") {
			ApplicationsMenu.gotoPortlet(
				category = "Object",
				panel = "Control Panel",
				portlet = "Data Sets");
		}
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		DataSetAdmin.deleteAllDataSetEntries();

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Blocked by LPS-187299. Confirm that the user can change the pagination on the data set admin page"
	@ignore = "true"
	@priority = 4
	test CanChangePaginationInAdminPage {
		task ("Given create 6 data sets") {
			DataSetAdmin.createDataSet(
				key_dataSetNameList = "Test Data Set 1,Test Data Set 2,Test Data Set 3,Test Data Set 4,Test Data Set 5,Test Data Set 6",
				key_type = "/data-set-manager/entries");
		}

		task ("When changing the page to 4 entries") {
			DataSetAdmin.changePagination(itemsPerPage = "4 Items");
		}

		task ("Then confirm that only 4 entries are displayed") {
			DataSetAdmin.assertDataSetEntry(key_dataSetNameList = "Test Data Set 1,Test Data Set 2,Test Data Set 3,Test Data Set 4");

			Pagination.viewResults(results = "Showing 1 to 4 of 6 entries.");
		}

		task ("When to switch to page 2") {
			Click(locator1 = "Pagination#NEXT_LINK");
		}

		task ("Then 2 entries are displayed") {
			DataSetAdmin.assertDataSetEntry(key_dataSetNameList = "Test Data Set 5,Test Data Set 6");

			Pagination.viewResults(results = "Showing 5 to 6 of 6 entries.");
		}
	}

	@description = "LPS-175990. Confirm that the user can create a data set entry"
	@priority = 5
	test CanCreateDataSet {
		task ("When Create a DataSet ") {
			DataSetAdmin.createDataSet(
				key_name = "Test Data Set",
				key_type = "/data-set-manager/entries");
		}

		task ("Then Confirm the name as expected") {
			AssertElementPresent(
				key_itemName = "Test Data Set",
				locator1 = "DataSet#TABLE_CELL");
		}

		task ("And Confirm the Provider as expected") {
			AssertElementPresent(
				key_itemName = "/data-set-manager/entries",
				locator1 = "DataSet#TABLE_CELL");
		}
	}

	@description = "LPS-172398. Confirm that the data set can be deleted"
	@priority = 5
	test CanDeleteDataSet {
		task ("When the user goes to add data sets") {
			DataSetAdmin.createDataSet(
				key_name = "Test Data Set",
				key_type = "/data-set-manager/entries");
		}

		task ("And the user deletes a data set") {
			DataSetAdmin.deleteDataSet(entry = "Test Data Set");
		}

		task ("Then The data set is not present in the Data Sets admin page") {
			AssertElementPresent(
				locator1 = "Message#EMPTY_STATE_INFO",
				value1 = "No Results Found");
		}
	}

	@description = "LPS-172882: Display a list of headless resources in new FDS View modal"
	@priority = 5
	test CanDisplayHeadlessDeliveryAPIResources {
		property test.liferay.virtual.instance = "false";

		task ("When go to add data sets") {
			LexiconEntry.gotoAdd();
		}

		task ("Then displays list of headless resources") {
			DataSetAdmin.searchProvider(
				dropdownLabel = "Choose an Option",
				key_provider = "Headless");

			AssertElementPresent(
				locator1 = "CommerceWidget#TAG_FACET_COMPACT_LAYOUT",
				tagName = "headless-admin-address/v1.0");

			AssertElementPresent(
				locator1 = "CommerceWidget#TAG_FACET_COMPACT_LAYOUT",
				tagName = "headless-admin-content/v1.0");

			AssertElementPresent(
				locator1 = "CommerceWidget#TAG_FACET_COMPACT_LAYOUT",
				tagName = "headless-admin-list-type/v1.0");

			AssertElementPresent(
				locator1 = "CommerceWidget#TAG_FACET_COMPACT_LAYOUT",
				tagName = "headless-admin-taxonomy/v1.0");
		}
	}

	@description = "Needs refactor after LPS-183512 is fixed | LPS-175990. Confirm the error message that appears when the user tries to create a data set entry with more than 280 characters in the name field"
	@priority = 3
	test CannotExceed280Characters {
		task ("When the user goes to add data sets") {
			LexiconEntry.gotoAdd();
		}

		task ("When a user types a name that is more than 280 characters") {
			PortletEntry.inputName(name = "Lorem ipsum dolor sit amet consectetur adipiscing elit. Nam fermentum est sed varius porttitor odio tortor commodo ligula quis auctor nulla massa ut eros. Vestibulum in eros maximus quam gravida dapibus. Proin vitae mi diam. Duis iaculis nisi quis pharetra varius arcu eros bibendum turpis nec posuere nibh arcu id orci.");
		}

		task ("And choose the provider named Channel") {
			DataSetAdmin.selectProvider(key_type = "/data-set-manager/entries");
		}

		task ("And clicking on the Save button") {
			Button.clickSave();
		}

		task ("Then Confirm that alert messages are present") {
			AssertTextPresent(
				locator1 = "Message#ERROR",
				value1 = "Your request failed to complete.");
		}
	}

	@description = "LPS-172882: Display matched result in new FDS View modal"
	@priority = 3
	test CanReturnAMatchedResult {
		property test.liferay.virtual.instance = "false";

		task ("When go to add data sets") {
			LexiconEntry.gotoAdd();
		}

		task ("And search for a known uniquely named headless provider") {
			DataSetAdmin.searchProvider(
				dropdownLabel = "Choose an Option",
				key_provider = "/data-set-manager/entries");
		}

		task ("Then the suggested list is updated to have only 1 result for the search, and Then the suggested list contains the uniquely named headless provider") {
			AssertElementPresent(
				locator1 = "CommerceWidget#TAG_FACET_COMPACT_LAYOUT",
				tagName = "/data-set-manager/entries");
		}
	}

	@description = "LPS-172882: Display no matched result in new FDS View modal"
	@priority = 4
	test CanReturnNoMatchedResults {
		task ("When go to add data sets") {
			LexiconEntry.gotoAdd();
		}

		task ("And When search for a phrase that doesn't match available headless providers") {
			DataSetAdmin.searchProvider(key_provider = "apple");
		}

		task ("Then suggested list contains 0 results") {
			AssertElementNotPresent(locator1 = "FrontendDataSet#DROPDOWN_LIST");
		}
	}

	@description = "LPS-172398. Confirm that the options view and Delete is present and is visible after clicking the ellipsis button."
	@priority = 3
	test DeleteAndViewAreAvailable {
		task ("When The user goes to add a new data set") {
			DataSetAdmin.createDataSet(
				key_name = "Test Data Set",
				key_type = "/data-set-manager/entries");
		}

		task ("And opening the dropdown menu") {
			Click(
				key_entry = "Test Data Set",
				locator1 = "ObjectPortlet#ENTRY_KEBAB_MENU");
		}

		task ("Then Confirm that the options view and Delete is present and is visible") {
			AssertElementPresent(locator1 = "ObjectPortlet#DELETE_ENTRY_BUTTON");

			AssertElementPresent(locator1 = "DataSet#VIEW_ENTRY_BUTTON");
		}
	}

	@description = "LPS-175990. Confirm the error message that appears when the user tries to create a data set entry without the filled name"
	@priority = 3
	test ErrorAppearsWhenNameBlank {
		task ("When the user goes to add data sets") {
			LexiconEntry.gotoAdd();
		}

		task ("And choose the Provider called /data-set-manager/entries") {
			DataSetAdmin.selectProvider(key_type = "/data-set-manager/entries");
		}

		task ("And clicking on the Save button") {
			Button.clickSave();
		}

		task ("Then Confirm that 'This field is required' alert messages are present in the provider field") {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#WARNING_FEEDBACK",
				value1 = "This field is required.");
		}
	}

	@description = "LPS-175990. Confirm the error message that appears when the user tries to create a Data Set without the filled provider"
	@priority = 3
	test ErrorAppearsWhenProviderBlank {
		task ("When the user goes to add data sets") {
			LexiconEntry.gotoAdd();
		}

		task ("And filling the field name with 'Test Data Set'") {
			PortletEntry.inputName(name = "Test Data Set");
		}

		task ("And clicking on the Save button") {
			PortletEntry.save();
		}

		task ("Then Confirm that 'This field is required' alert messages are present in the provider field") {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#WARNING_FEEDBACK",
				value1 = "This field is required.");
		}
	}

	@description = "LPS-175990. Confirm that the user can cancel the creation of a data set entry"
	@priority = 5
	test NotCreatedAfterCancel {
		task ("When The user goes to add data sets") {
			LexiconEntry.gotoAdd();
		}

		task ("And fills the field name with name 'Test Data Set'") {
			PortletEntry.inputName(name = "Test Data Set");
		}

		task ("And choose the Provider called /data-set-manager/entries ") {
			DataSetAdmin.selectProvider(key_type = "/data-set-manager/entries");
		}

		task ("And clicking on the Cancel button ") {
			Click(
				key_text = "Cancel",
				locator1 = "Button#ANY_SECONDARY");
		}

		task ("Then Confirm that the data set was not created") {
			AssertElementNotPresent(
				key_itemName = "Test Data Set",
				locator1 = "DataSet#TABLE_CELL");
		}
	}

	@description = "LPS-172398. Confirm that the data set was not deleted after clicking CANCEL in the modal"
	@priority = 5
	test NotDeleteDataSetAfterCancel {
		task ("When the user goes to add data sets") {
			DataSetAdmin.createDataSet(
				key_name = "Test Data Set",
				key_type = "/data-set-manager/entries");
		}

		task ("And the user deletes a data set") {
			Click(
				key_entry = "Test Data Set",
				locator1 = "ObjectPortlet#ENTRY_KEBAB_MENU");

			ClickNoError(locator1 = "ObjectPortlet#DELETE_ENTRY_BUTTON");

			AssertElementPresent(
				key_modalText = "Deleting a data set is an action that cannot be reversed. The content will be deleted and some data set fragments may not be displayed.",
				locator1 = "DataSet#DELETE_DATA_SET_MODAL_BODY");

			Button.clickCancel();
		}

		task ("Then The data set is not present in the Data Sets admin page") {
			AssertElementPresent(
				key_itemName = "Test Data Set",
				locator1 = "DataSet#TABLE_CELL");
		}
	}

	@description = "LPS-172398. Confirm that the data set was not deleted after clicking clicks on the 'X' button in the modal"
	@priority = 5
	test NotDeleteDataSetAfterCloseButton {
		task ("When The user goes to add a new data set") {
			DataSetAdmin.createDataSet(
				key_name = "Test Data Set",
				key_type = "/data-set-manager/entries");
		}

		task ("And When the user deletes a data set") {
			Click(
				key_entry = "Test Data Set",
				locator1 = "ObjectPortlet#ENTRY_KEBAB_MENU");

			ClickNoError(locator1 = "ObjectPortlet#DELETE_ENTRY_BUTTON");

			AssertElementPresent(
				key_modalText = "Deleting a data set is an action that cannot be reversed. The content will be deleted and some data set fragments may not be displayed.",
				locator1 = "DataSet#DELETE_DATA_SET_MODAL_BODY");
		}

		task ("And When the user clicks on the 'X' button in the modal") {
			Click(
				key_modalTitle = "Delete Data Set",
				locator1 = "Button#CLOSE_MODAL");
		}

		task ("Then The data set is present in the Data Sets admin page") {
			AssertElementPresent(
				key_itemName = "Test Data Set",
				locator1 = "DataSet#TABLE_CELL");
		}
	}

	@description = "Needs refactor after LPS-183512 is fixed | LPS-175990. Confirm that the user can create a data set entry with special chatacters"
	@priority = 5
	test WithSpecialCharacters {
		task ("When Create a DataSet") {
			DataSetAdmin.createDataSet(
				key_name = "Data Set ~!@#$%^&*(){}[].<>/? name",
				key_type = "/data-set-manager/entries");
		}

		task ("Then confirm that the data set is created and if the name is provided as expected") {
			AssertElementPresent(
				key_itemName = "Data Set ~!@#$%^&*(){}[].<>/? name",
				locator1 = "DataSet#TABLE_CELL");
		}

		task ("And Then Confirm the Provider as expected") {
			AssertElementPresent(
				key_itemName = "/data-set-manager/entries",
				locator1 = "DataSet#TABLE_CELL");
		}
	}

}
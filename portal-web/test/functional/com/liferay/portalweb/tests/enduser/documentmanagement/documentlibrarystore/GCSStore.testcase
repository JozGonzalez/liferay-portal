@component-name = "portal-document-library-store"
@ignore = "true"
definition {

	property gcs.store.enabled = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property test.assert.warning.exceptions = "true";
	property testray.main.component.name = "Document Library Stores";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		HeadlessSite.addSite(siteName = "Test Site Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");

			User.logoutPG();
		}
	}

	@description = "This is a use case for LPS-129271."
	@priority = 4
	test AssertNoErrorMessageAfterExportAndImportSiteLAR {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		var bucketId = PropsUtil.get("gcs.bucket.id");
		var companyId = JSONCompany.getCompanyId();
		var groupId = JSONGroupAPI._getGroupIdByName(
			groupName = "Test Site Name",
			site = "true");

		AntCommands.runCommand("build-test-gcs-store.xml", "assert-no-document-in-bucket -Dcompany.id=${companyId} -Dgcs.bucket.id=${bucketId} -Dgroup.id=${groupId}");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Test Site Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		AntCommands.runCommand("build-test-gcs-store.xml", "assert-document-in-bucket -Dcompany.id=${companyId} -Dgcs.bucket.id=${bucketId} -Dgroup.id=${groupId}");

		LAR.exportSiteCP(siteScopeName = "Test Site Name");

		var larFileName = LAR.getLarFileName();

		LAR.downloadLar();

		HeadlessSite.addSite(siteName = "Test Site Name 1");

		for (var layoutUtilityPageName : list "404 Error,500 Error") {
			JSONLayoututilitypage.deleteLayoutUtilityPage(
				groupName = "Test Site Name 1",
				layoutUtilityPageName = ${layoutUtilityPageName});
		}

		var groupId1 = JSONGroupAPI._getGroupIdByName(
			groupName = "Test Site Name 1",
			site = "true");

		AntCommands.runCommand("build-test-gcs-store.xml", "assert-no-document-in-bucket -Dcompany.id=${companyId} -Dgcs.bucket.id=${bucketId} -Dgroup.id=${groupId1}");

		LAR.importSiteCP(
			larFileName = ${larFileName},
			siteName = "Test Site Name 1");

		AntCommands.runCommand("build-test-gcs-store.xml", "assert-document-in-bucket -Dcompany.id=${companyId} -Dgcs.bucket.id=${bucketId} -Dgroup.id=${groupId1}");

		AssertConsoleTextNotPresent(value1 = "java.io.IOException");
	}

	@ignore = "true"
	@priority = 5
	test GCSStoreSmoke {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		var bucketId = PropsUtil.get("gcs.bucket.id");
		var companyId = JSONCompany.getCompanyId();
		var groupId = JSONGroupAPI._getGroupIdByName(
			groupName = "Test Site Name",
			site = "true");

		AntCommands.runCommand("build-test-gcs-store.xml", "assert-no-document-in-bucket -Dcompany.id=${companyId} -Dgcs.bucket.id=${bucketId} -Dgroup.id=${groupId}");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.txt",
			dmDocumentTitle = "DM Document Title");

		AntCommands.runCommand("build-test-gcs-store.xml", "assert-document-in-bucket -Dcompany.id=${companyId} -Dgcs.bucket.id=${bucketId} -Dgroup.id=${groupId}");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");

		DMDocument.deleteCP(dmDocumentTitle = "DM Document Title");

		RecycleBin.openRecycleBinAdmin(siteURLKey = "test-site-name");

		RecycleBin.emptyCP();

		AntCommands.runCommand("build-test-gcs-store.xml", "assert-no-document-in-bucket -Dcompany.id=${companyId} -Dgcs.bucket.id=${bucketId} -Dgroup.id=${groupId}");
	}

}
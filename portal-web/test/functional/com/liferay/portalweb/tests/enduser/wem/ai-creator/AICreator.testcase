@component-name = "portal-wcm"
definition {

	property custom.properties = "feature.flag.LPS-179483=true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testcase.url = "http://localhost:8080";
	property testray.main.component.name = "AI-Creator";

	static var randomSiteName = StringUtil.randomString(8);

	var siteURLKey = StringUtil.toLowerCase(${randomSiteName});

	setUp {
		task ("Sign in") {
			User.firstLoginPG();
		}
	}

	@description = "This is a test for LPS-179484. The site administrater could access to the OpenAI configuration page of Instance Settings."
	@priority = 4
	test AccessToOpenAIConfigurationPageOfInstanceSettings {
		task ("Given a site administrater goes to the Instance Settings") {
			PortalSettings.openInstanceSettingsAdmin();
		}

		task ("When the site administrater accesses to the OpenAI configuration page") {
			SystemSettings.gotoConfiguration(
				configurationCategory = "AI Creator",
				configurationName = "OpenAI",
				configurationScope = "Virtual Instance Scope");
		}

		task ("Then the site administrater should see OpenAI settings") {
			FormFields.viewCheckboxChecked(fieldName = "Enable OpenAI to Create Content");

			InputField.viewText(
				fieldLabel = "API Key",
				text = "");
		}

		task ("When the site administrater clicks the link of How do I get an API key?") {
			Click(
				key_text = "How do I get an API key?",
				locator1 = "Link#ANY");
		}

		task ("Then the site administrater should see the OpenAI API page opened in a new tab") {
			SelectWindow.selectPopUp(locator1 = "null");

			AssertLocation.assertPartialLocation(value1 = "https://platform.openai.com/docs/api-reference/authentication");
		}
	}

	@description = "This is a test for LPS-179484. The site administrater could access to the OpenAI configuration page of Site Settings."
	@priority = 4
	test AccessToOpenAIConfigurationPageOfSiteSettings {
		task ("Given a site administrater goes to the Site Settings") {
			HeadlessSite.addSite(siteName = ${randomSiteName});

			Site.openSiteSettingsAdmin(siteURLKey = ${siteURLKey});
		}

		task ("When the site administrater accesses to the OpenAI configuration page") {
			Click(
				key_itemName = "AI Creator",
				locator1 = "ListGroupItem#ITEM_TEXT");

			Navigator.gotoNavTab(navTab = "OpenAI");
		}

		task ("Then the site administrater should see OpenAI settings") {
			FormFields.viewCheckboxChecked(fieldName = "Enable OpenAI to Create Content");

			InputField.viewText(
				fieldLabel = "API Key",
				text = "");
		}

		task ("When the site administrater clicks the link of How do I get an API key?") {
			Click(
				key_text = "How do I get an API key?",
				locator1 = "Link#ANY");
		}

		task ("Then the site administrater should see the OpenAI API page opened in a new tab") {
			SelectWindow.selectPopUp(locator1 = "null");

			AssertLocation.assertPartialLocation(value1 = "https://platform.openai.com/docs/api-reference/authentication");
		}
	}

	@description = "This is a test for LPS-179484. The site administrater cannot enable OpenAI from site after disable it from instance settings."
	@priority = 3
	test CannotEnableOpenAIFromSiteSettingsAfterDisableItFromInstanceSettings {
		property test.liferay.virtual.instance = "false";

		task ("Given a site administrater disable the OpenAI from Instance Settings") {
			HeadlessSite.addSite(siteName = ${randomSiteName});

			PortalSettings.gotoConfiguration(
				configurationCategory = "AI Creator",
				configurationName = "OpenAI",
				configurationScope = "Virtual Instance Scope");

			FormFields.disableCheckbox(fieldName = "Enable OpenAI to Create Content");

			PortletEntry.save();
		}

		task ("When the site administrater accesses to the OpenAI configuration page") {
			Site.openSiteSettingsAdmin(siteURLKey = ${siteURLKey});

			Click(
				key_itemName = "AI Creator",
				locator1 = "ListGroupItem#ITEM_TEXT");

			Navigator.gotoNavTab(navTab = "OpenAI");
		}

		task ("Then the site administrater should see the Enable OpenAI to Create Content is disabled") {
			AssertNotEditable.assertNotEditableNotVisible(
				checkboxName = "Enable OpenAI to Create Content",
				locator1 = "Checkbox#ANY_CHECKBOX");

			Alert.viewInfoMessageSpecific(infoMessage = "To enable OpenAI in this site, it must also be enabled from instance settings.");
		}
	}

	@description = "This is a test for LPS-179485. The content creator should see success message after set up an api key successfully."
	@priority = 4
	test ConfigureAPIKey {
		property test.liferay.virtual.instance = "false";

		task ("Given a content creator enables the OpenAI client") {
			GogoShell.openGogoShellAdmin();

			GogoShell.executeCommand(commandName = "scr:enable com.liferay.ai.creator.openai.web.internal.client.MockAICreatorOpenAIClient");

			GogoShell.viewOutput(outputContent = "true");
		}

		task ("When the content creator accesses to the OpenAI configuration page") {
			PortalSettings.gotoConfiguration(
				configurationCategory = "AI Creator",
				configurationName = "OpenAI",
				configurationScope = "Virtual Instance Scope");
		}

		task ("Then the content creator could configure API key successfully") {
			InputField.editText(
				fieldLabel = "API Key",
				text = "VALID_API_KEY");

			PortletEntry.save();

			InputField.viewText(
				fieldLabel = "API Key",
				text = "VALID_API_KEY");
		}
	}

	@description = "This is a test for LPS-179485. The content creator could generate content via AI Creator."
	@priority = 4
	test GenerateContent {
		property test.liferay.virtual.instance = "false";

		task ("Given a content creator configures the API key") {
			GogoShell.openGogoShellAdmin();

			GogoShell.executeCommand(commandName = "scr:enable com.liferay.ai.creator.openai.web.internal.client.MockAICreatorOpenAIClient");

			GogoShell.viewOutput(outputContent = "true");

			PortalSettings.gotoConfiguration(
				configurationCategory = "AI Creator",
				configurationName = "OpenAI",
				configurationScope = "Virtual Instance Scope");

			InputField.editText(
				fieldLabel = "API Key",
				text = "VALID_API_KEY");

			PortletEntry.save();
		}

		task ("When the content creator opens the AI Creator modal in web content editor") {
			HeadlessSite.addSite(siteName = ${randomSiteName});

			WebContentNavigator.openWebContentAdmin(siteURLKey = ${siteURLKey});

			WebContentNavigator.gotoAddCP();

			Click.javaScriptClick(locator1 = "CKEditor#TOOLBAR_AI_CREATOR_BUTTON");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");
		}

		task ("Then the content creator sees the default values on modal") {
			AssertAttributeValue(
				attribute1 = "placeholder",
				key_text = "Description",
				locator1 = "TextInput#ANY",
				value1 = "Write something...");

			AssertSelectedLabel(
				key_fieldLabel = "Tone",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Neutral");

			AssertTextEquals(
				key_text = "Word Count",
				locator1 = "TextInput#ANY",
				value1 = 100);
		}

		task ("When the content creator generates content") {
			InputField.editText(
				fieldLabel = "Description",
				text = "USER_CONTENT");

			var map = MapUtil.newHashMap();

			ExecuteCDPCommand(
				value1 = "Fetch.enable",
				value2 = ${map});

			Button.clickCreate();
		}

		task ("Then the content creator could see the loading message") {
			AssertTextEquals(
				locator1 = "Modal#LOADING_ANIMATION",
				value1 = "Creating content... This process may take a while.");

			var map = MapUtil.newHashMap();

			ExecuteCDPCommand(
				value1 = "Fetch.disable",
				value2 = ${map});
		}

		task ("When the content creator adds the generated content") {
			AssertTextEquals(
				key_label = "Content",
				locator1 = "TextArea#ANY_LABELED",
				value1 = "OPENAI_API_COMPLETION_RESPONSE_CONTENT");

			Button.click(button = "Add");

			SelectFrameTop();
		}

		task ("Then the content creator could see the generated content in Content field") {
			CKEditor.viewEntryContent(
				content = "OPENAI_API_COMPLETION_RESPONSE_CONTENT",
				fieldLabel = "Content");
		}
	}

}
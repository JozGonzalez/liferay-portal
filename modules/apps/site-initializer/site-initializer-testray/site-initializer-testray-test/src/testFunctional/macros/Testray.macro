definition {

	macro addNewComponent {
		SelectFrame(locator1 = "Testray#MODAL_BODY");

		Click(locator1 = "TestrayManage#ADD_PROJECT_ON_MODAL");

		Type(
			locator1 = "TestrayManage#NEW_OPTION_NAME",
			value1 = ${componentName});

		if (isSet(teamName)) {
			Select(
				key_fieldLabel = "Team",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = ${teamName});
		}

		Button.clickSave();
	}

	macro addTestraySite {
		Site.openSitesAdmin();

		LexiconEntry.gotoAdd();

		LexiconCard.clickCard(card = "Liferay Site Initializer Testray");

		SelectFrame(
			key_title = "Add Site",
			locator1 = "IFrame#MODAL_ANY");

		PortletEntry.inputName(name = ${siteName});

		Button.click(button = "Add");

		Site.openSitesAdmin();

		while (IsElementNotPresent(key_siteName = ${siteName}, locator1 = "Sites#SITE_TABLE_NAME")) {
			Refresh();

			WaitForPageLoad();
		}
	}

	macro addTR2Site {
		Site.openSitesAdmin();

		Site.addSiteTemplateCP(
			siteName = ${siteName},
			siteTemplateName = "Liferay Site Initializer Testray");
	}

	macro assertItemName {
		var key_name = ${text};

		AssertElementPresent(
			key_projectName = ${key_name},
			locator1 = "Testray#ITEM_NAME");
	}

	macro assertItemNotPresent {
		var key_name = ${text};

		AssertElementNotPresent(
			key_projectName = ${key_name},
			locator1 = "Testray#ITEM_NAME");
	}

	macro assertItemsPerPageValue {
		AssertElementPresent(
			key_value = ${itemValue},
			locator1 = "Testray#ITEMS_PER_PAGE_VALUE_BUTTON");
	}

	macro assertNameTitle {
		AssertElementPresent(
			key_title = ${key_name},
			locator1 = "Testray#NAME_TITLE");
	}

	macro assertPageNumber {
		AssertElementPresent(
			key_pageNumber = ${pageNumber},
			locator1 = "Testray#NUMBER_PAGE_BUTTON");
	}

	macro assertProjectDescription {
		AssertElementPresent(
			key_value = ${value},
			locator1 = "Testray#DESCRIPTION_PROJECT");
	}

	macro assertProjectTitleHeader {
		AssertElementPresent(
			key_projectName = ${projectName},
			locator1 = "Testray#PROJECT_NAME_HEADER");
	}

	macro assertShowedItems {
		AssertElementPresent(
			key_text = ${itemsText},
			locator1 = "Testray#ITEMS_PER_PAGE_DESCRIPTION");
	}

	macro backSectionBreadcrumb {
		for (var n : list "1,2,3,4") {
			KeyPress(
				locator1 = "TestrayTestflow#BREADCRUMB_EDIT",
				value1 = "\BACK_SPACE");
		}

		if (isSet(value)) {
			Type(
				locator1 = "TestrayTestflow#BREADCRUMB_EDIT",
				value1 = ${value});

			AssertTextEquals(
				locator1 = "TestrayTestflow#BREADCRUMB_EDIT",
				value1 = ${value});
		}
	}

	macro changePagination {
		Click(
			key_numberItems = ${numberItems},
			locator1 = "Testray#ITEMS_PER_PAGE_BUTTON");

		Click(
			key_value = ${valuePagination},
			locator1 = "Testray#ITEMS_PER_PAGE_SELECT");
	}

	macro changePaginationInModal {
		Click(
			key_numberItems = ${numberItems},
			locator1 = "Testray#ITEMS_PER_PAGE_BUTTON_MODAL");

		Click(
			key_value = ${valuePagination},
			locator1 = "Testray#ITEMS_PER_PAGE_SELECT");
	}

	macro changeTeamToComponent {
		TestrayContextMenu.clickContextMenuProjects(name = ${currentTeam});

		TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Edit");

		Select(
			key_fieldLabel = "Team",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = ${newTeamName});

		Button.clickSave();
	}

	macro checkSuccessAlertAppearsAndDisappears {
		WaitForElementPresent(locator1 = "Message#SUCCESS");

		Alert.closeMessage(messageType = "SUCCESS");

		WaitForElementNotPresent(locator1 = "Message#SUCCESS");
	}

	macro clickOnPageNumber {
		Click(
			key_pageNumber = ${pageNumber},
			locator1 = "Testray#NUMBER_PAGE_BUTTON");
	}

	macro clickOnPageNumberModal {
		Click(
			key_pageDirection = ${pageNumber},
			locator1 = "Testray#NUMBER_PAGE_BUTTON_MODAL");
	}

	macro confirmBreadcrumb {
		KeyPress.keyPressNoError(
			locator1 = "TestrayTestflow#BREADCRUMB_EDIT",
			value1 = "\ENTER");
	}

	macro createProjectByDropdown {
		TestrayLayout.clickManageOnSidebar();

		TestrayManage.selectOptionsManage(itemValue = "Add Project");

		Type(
			locator1 = "TestrayManage#NEW_OPTION_NAME",
			value1 = ${key_name});

		Type(
			locator1 = "Testray#NEW_DESCRIPTION_PROJECT",
			value1 = ${description});

		Click(locator1 = "TestrayManage#SAVE_BUTTON");
	}

	macro createProjectTestray {
		Click(locator1 = "Button#PLUS");

		SelectFrame(locator1 = "Testray#MODAL_BODY");

		Type(
			locator1 = "TestrayManage#NEW_OPTION_NAME",
			value1 = ${key_name});

		Type(
			locator1 = "Testray#NEW_DESCRIPTION_PROJECT",
			value1 = ${description});

		Click(locator1 = "TestrayManage#SAVE_BUTTON");
	}

	macro deleteAllProjects {
		TestrayLayout.clickResultsOnSidebar();

		Refresh();

		Testray.changePagination(
			numberItems = 20,
			valuePagination = 150);

		while (IsElementPresent(key_projectName = "Projects_", locator1 = "Testray#ITEM_NAME")) {
			TestrayContextMenu.clickContextMenuProjects(name = "Projects_");

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Delete");

			AssertConfirm(value1 = "Are you sure you want to delete this item?");

			Alert.viewSuccessMessage();
		}
	}

	macro deleteComponent {
		RightClick.rightClick(
			key_projectName = ${itemName},
			locator1 = "Testray#ITEM_NAME");

		TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Delete");

		AssertConfirm(value1 = "Are you sure you want to delete this item?");

		Alert.viewSuccessMessage();
	}

	macro deleteProject {
		TestrayLayout.clickResultsOnSidebar();

		Testray.changePagination(
			numberItems = 20,
			valuePagination = 150);

		TestrayContextMenu.clickContextMenuProjects(name = ${projectName});

		TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Delete");

		AssertConfirm(value1 = "Are you sure you want to delete this item?");
	}

	macro editComponent {
		TestrayContextMenu.clickContextMenuProjects(name = ${componentName});

		TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Edit");

		if (isSet(newComponentName)) {
			Type(
				locator1 = "TestrayManage#NEW_OPTION_NAME",
				value1 = ${newComponentName});
		}

		if (isSet(newTeamName)) {
			Select(
				key_fieldLabel = "Team",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = ${newTeamName});
		}

		Button.clickSave();
	}

	macro editProjectTestray {
		SelectFrame(locator1 = "Testray#MODAL_BODY");

		Type(
			locator1 = "TestrayManage#NEW_OPTION_NAME",
			value1 = ${name});

		Type(
			locator1 = "Testray#NEW_DESCRIPTION_PROJECT",
			value1 = ${description});

		Click(locator1 = "TestrayManage#SAVE_BUTTON");
	}

	macro gotoAddProject {
		Click(locator1 = "Testray#ADD_PROJECT");
	}

	macro gotoBreadcrumb {
		KeyPress(
			locator1 = "//body",
			value1 = "/");
	}

	macro goToLink {
		WaitForPageLoad();

		Click.clickAtNotVisible(
			key_text = ${text},
			locator1 = "Testray#LINK_TO_HOME");
	}

	macro goToNextAndPreviousPage {
		Click(
			key_pageDirection = ${pageDirection},
			locator1 = "Testray#NEXT_AND_PREVIOUS_PAGE_BUTTON");
	}

	macro goToProjectPage {
		Click(
			key_projectName = ${projectName},
			locator1 = "Testray#ITEM_NAME");
	}

	macro goToTestflow {
		Click(locator1 = "Testray#TESTFLOW_SIDEBAR");
	}

	macro kebabMenuOption {
		Click(locator1 = "ObjectAdmin#KEBAB_MENU");

		ClickNoError(
			key_kebabOption = ${kebabOption},
			locator1 = "ObjectAdmin#KEBAB_MENU_OPTION");
	}

	macro nextSectionBreadcrumb {
		if (isSet(project)) {
			Type(
				locator1 = "TestrayTestflow#BREADCRUMB_EDIT",
				value1 = ${project});

			AssertTextEquals(
				locator1 = "TestrayTestflow#BREADCRUMB_EDIT",
				value1 = ${project});
		}

		if (isSet(project)) {
			KeyPress(
				locator1 = "TestrayTestflow#BREADCRUMB_EDIT",
				value1 = "\TAB");
		}

		if (isSet(routine)) {
			Type(
				locator1 = "TestrayTestflow#BREADCRUMB_EDIT",
				value1 = ${routine});

			AssertTextEquals(
				locator1 = "TestrayTestflow#BREADCRUMB_EDIT",
				value1 = ${routine});
		}

		if (isSet(routine)) {
			KeyPress(
				locator1 = "TestrayTestflow#BREADCRUMB_EDIT",
				value1 = "\TAB");
		}

		if (isSet(build)) {
			Type(
				locator1 = "TestrayTestflow#BREADCRUMB_EDIT",
				value1 = ${build});

			AssertTextEquals(
				locator1 = "TestrayTestflow#BREADCRUMB_EDIT",
				value1 = ${build});
		}

		if (isSet(build)) {
			KeyPress(
				locator1 = "TestrayTestflow#BREADCRUMB_EDIT",
				value1 = "\TAB");
		}

		if (isSet(run)) {
			Type(
				locator1 = "TestrayTestflow#BREADCRUMB_EDIT",
				value1 = ${run});

			AssertTextEquals(
				locator1 = "TestrayTestflow#BREADCRUMB_EDIT",
				value1 = ${run});
		}

		if (isSet(run)) {
			KeyPress(
				locator1 = "TestrayTestflow#BREADCRUMB_EDIT",
				value1 = "\TAB");
		}

		if (isSet(caseResult)) {
			Type(
				locator1 = "TestrayTestflow#BREADCRUMB_EDIT",
				value1 = ${caseResult});

			AssertTextEquals(
				locator1 = "TestrayTestflow#BREADCRUMB_EDIT",
				value1 = ${caseResult});
		}

		Testray.confirmBreadcrumb();
	}

	macro projectTabNavigator {
		Click(
			key_navTabName = ${navTabName},
			locator1 = "Testray#PROJECT_NAVIGATOR_TAB_BUTTON");
	}

	macro selectUsers {
		Button.click(button = "Assign Users");

		for (var userName : list ${listUserName}) {
			Click.clickAtNotVisible(
				key_checkboxOption = ${userName},
				locator1 = "Checkbox#SPECIFIC_CHECKBOX_IN_TABLE");
		}

		Button.click(button = "Select Users");
	}

	macro signOutTestray {
		Click(locator1 = "TestrayUser#USER_ICON_SIDEBAR");

		Click(locator1 = "TestrayUser#SIGN_OUT");
	}

	macro tearDownCP {
		ApplicationsMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites");

		Refresh();

		PortletEntry.selectAll();

		ClickNoError(locator1 = "Icon#DELETE");

		Click(locator1 = "Button#MODAL_DELETE");

		Alert.viewSuccessMessage();
	}

	macro testrayApisTearDown {
		Testray.tearDownCP();

		ClientExtensionGeneral.goToRemoteAppsPortlet();

		ClientExtensionGeneral.deleteRemoteApp(tableEntry = "Testray");
	}

	macro typeProjectsField {
		SelectFrame(locator1 = "Testray#MODAL_BODY");

		Type(
			locator1 = "TestrayManage#NEW_OPTION_NAME",
			value1 = ${projectName});

		Type(
			locator1 = "Testray#NEW_DESCRIPTION_PROJECT",
			value1 = ${description});

		Click(locator1 = "TestrayManage#SAVE_BUTTON");
	}

	macro viewAlert {
		var key_alertText = ${alertText};

		AssertVisible(locator1 = "CustomerPortalSite#ALERT_NOTIFICATIONS");
	}

	macro viewErrorMessage {
		AssertElementPresent(
			key_fieldLabel = ${fieldLabel},
			key_warningMessage = ${warningMessage},
			locator1 = "Testray#FIELD_REQUIRED_MESSAGE");
	}

	macro viewOverviewTab {
		AssertElementPresent(
			key_rowValue = ${rowValue},
			locator1 = "Testray#OVERVIEW_LAYOUT_VALUES");
	}

}
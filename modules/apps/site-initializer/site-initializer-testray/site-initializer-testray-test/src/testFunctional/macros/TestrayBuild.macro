definition {

	macro addBuildViaUI {
		if (!(isSet(addVersion))) {
			var addVersion = "1.3";
		}

		Click(locator1 = "Button#PLUS");

		if (isSet(dropdownItem)) {
			Click.javaScriptClick(
				key_menuItem = ${dropdownItem},
				locator1 = "MenuItem#ANY_MENU_ITEM");
		}

		if (isSet(buildFieldName)) {
			PortletEntry.inputName(name = ${buildFieldName});
		}

		if (isSet(routine)) {
			Select(
				locator1 = "Select#SELECT_ID",
				selectFieldId = "routineId",
				value1 = ${routine});
		}

		TestrayManage.addProductVersionInBuild(key_name = ${addVersion});

		if (isSet(productVersionOption)) {
			Select(
				locator1 = "Select#SELECT_ID",
				selectFieldId = "productVersionId",
				value1 = ${productVersionOption});
		}

		if (isSet(gitHash)) {
			PortletEntry.inputText(
				fieldLabel = "Git Hash",
				text = ${gitHash});
		}

		if (isSet(description)) {
			Type(
				locator1 = "TextArea#DESCRIPTION",
				value1 = ${description});
		}

		Testray.selectCheckboxOptions(
			buttonText = "Select Cases",
			checkboxNameList = ${caseList},
			linkText = "Add Cases");

		Button.clickSave();
	}

	macro addBuildWithMultipleOptions {
		Click(locator1 = "Button#PLUS");

		if (isSet(dropdownItem)) {
			Click.javaScriptClick(
				key_menuItem = ${dropdownItem},
				locator1 = "MenuItem#ANY_MENU_ITEM");
		}

		if (isSet(fieldName)) {
			PortletEntry.inputName(name = ${fieldName});
		}

		if (isSet(routine)) {
			Select(
				locator1 = "Select#SELECT_ID",
				selectFieldId = "routineId",
				value1 = ${routine});
		}

		if (isSet(addVersion)) {
			TestrayManage.addProductVersionInBuild(key_name = ${addVersion});
		}

		if (isSet(productVersion)) {
			Select(
				locator1 = "Select#SELECT_ID",
				selectFieldId = "productVersionId",
				value1 = ${productVersion});
		}

		if (isSet(gitHash)) {
			PortletEntry.inputText(
				fieldLabel = "Git Hash",
				text = ${gitHash});
		}

		if (isSet(description)) {
			Type(
				locator1 = "TextArea#DESCRIPTION",
				value1 = ${description});
		}

		Testray.selectCheckboxOptions(
			buttonText = "Select Cases",
			checkboxNameList = ${caseList},
			linkText = "Add Cases");

		TestrayBuild.addNewOptionInBuild(
			category = ${categoryName},
			option = ${optionName});

		TestrayBuild.addSelectStacksInBuild(
			parameterLabel = ${labelStack},
			stackOptions = ${stackName});

		Button.clickSave();
	}

	macro addNewOptionInBuild {
		Button.click(button = "Add Option");

		SelectFrame(locator1 = "Testray#MODAL_BODY");

		if (isSet(option)) {
			Type(
				locator1 = "Testray#FIELD_NAME_MODAL",
				value1 = ${option});
		}

		if (isSet(category)) {
			Select(
				locator1 = "Select#SELECT_ID",
				selectFieldId = "factorCategoryId",
				value1 = ${category});
		}

		Button.clickSave();
	}

	macro addSelectStacksInBuild {
		Button.click(button = "Select Stacks");

		Click(
			locator1 = "TestrayBuild#SELECT_STACKS_PARAMETER_LABEL_FIELD",
			parameterLabel = ${parameterLabel},
			stackOptions = ${stackOptions});

		Button.click(button = "Next");

		Button.click(button = "Add");
	}

	macro addSuitesInBuild {
		Testray.selectCheckboxOptions(
			buttonText = "Select Suites",
			checkboxNameList = ${suiteList},
			linkText = "Add Suites");
	}

	macro deleteBuild {
		TestrayDropdown.goToResultSidebar();

		Testray.changePagination(quantity = 150);

		Testray.clickTableEntry(tableEntry = "Projects_1 Project");

		Testray.clickTableEntry(tableEntry = "Routines_1 Routine");

		while (IsElementPresent(key_tableEntry = "Builds_", locator1 = "Testray#TABLE_ENTRY")) {
			Testray.deleteItem(itemName = ${itemName});

			Alert.viewSuccessMessage();
		}
	}

	macro editBuild {
		if (isSet(newName)) {
			PortletEntry.inputName(name = ${newName});
		}

		if (isSet(routine)) {
			Select(
				locator1 = "Select#SELECT_ID",
				selectFieldId = "routineId",
				value1 = ${routine});
		}

		if (isSet(addVersion)) {
			TestrayManage.addProductVersionInBuild(key_name = ${addVersion});
		}

		if (isSet(productVersion)) {
			Select(
				locator1 = "Select#SELECT_ID",
				selectFieldId = "productVersionId",
				value1 = ${productVersion});
		}

		if (isSet(gitHash)) {
			PortletEntry.inputText(
				fieldLabel = "Git Hash",
				text = ${gitHash});
		}

		if (isSet(description)) {
			Type(
				locator1 = "TextArea#DESCRIPTION",
				value1 = ${description});
		}

		if (isSet(caseList)) {
			Testray.selectCheckboxOptions(
				buttonText = "Select Cases",
				checkboxNameList = ${caseList},
				linkText = "Add Cases");
		}

		Button.clickSave();
	}

	macro selectDefaultEnvironmentFactors {
		WaitForElementPresent(
			key_environmentFactors = "Application Server",
			locator1 = "Testray#SELECT_ENVIRONMENT_FACTORS");

		for (var listboxItem : list ${listCategory}) {
			Click(
				key_environmentFactors = ${listboxItem},
				locator1 = "Testray#SELECT_ENVIRONMENT_FACTORS");

			Click(locator1 = "Testray#AUDIT_GRAPH_CONFIGURATION_RIGHT_ARROW_BUTTON");
		}

		Button.click(button = "Next");

		Select(
			key_fieldLabel = ${label},
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = ${listOption});

		if (isSet(label1)) {
			Select(
				key_fieldLabel = ${label1},
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = ${listOption1});
		}

		Button.click(button = "Save");
	}

	macro verifyPromotedBuild {
		Alert.viewSuccessMessage();

		Refresh();

		AssertElementPresent(locator1 = "TestrayBuild#PROMOTE_BUILD");
	}

	macro verifySpecificEnvironmentFactors {
		if (isSet(listCategory)) {
			AssertElementPresent(
				key_environmentFactors = ${listCategory},
				locator1 = "Testray#VERIFY_ENVIRONMENT_FACTORS_SELECTED");
		}

		Button.click(button = "Next");

		if (isSet(label)) {
			AssertElementPresent(
				key_fieldLabel = ${label},
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = ${listOption});
		}
	}

}
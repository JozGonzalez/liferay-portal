@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	var caseType = "Case Type 1";
	var projectName = "Project 1";
	var routineName = "Routine 1";
	var testSiteName = "Testray 2";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Testray Site") {
			HeadlessSite.addSite(
				siteName = ${testSiteName},
				templateName = "Testray",
				templateType = "Site Initializer");
		}

		task ("Create project and case type via API and go to Testray Site") {
			JSONTestray.addProject(
				projectDescription = "Project Description 1",
				projectName = ${projectName});

			JSONTestray.addCaseType(caseType = ${caseType});

			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(quantity = 150);
		}
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		task ("Delete case type and project via API, Testray Site and Client Extensions") {
			JSONTestrayAPI.deleteObjectViaAPI(
				object = "casetypes",
				objectName = ${caseType});

			JSONTestrayAPI.deleteProject(projectName = ${projectName});

			Testray.testrayApisTearDown();
		}

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Story ID: LPS-146913 | Test Summary: Verify if as an Administrator I should be able to add and delete a Routine with Default Environment Factors"
	@priority = 3
	test AdminCanAddAndDeleteRoutineWithDefaultEnvironmentFactors {
		task ("Given that the user add a new Routine") {
			JSONTestray.addRoutine(
				projectName = ${projectName},
				routineName = ${routineName});
		}

		task ("And that the user add default environments factors") {
			JSONTestray.addEnvironmentFactors(environmentFactorsName = "Environment Factors 1");

			Testray.clickTableEntry(tableEntry = ${projectName});
		}

		task ("Then the routine is deleted with predefined environment factors, they should not appear in the list") {
			Testray.deleteItem(itemName = ${routineName});

			Testray.viewTableEntryListNotPresent(listEntry = ${routineName});
		}

		task ("Delete objects") {
			JSONTestrayAPI.deleteObjectViaAPI(
				object = "factorcategories",
				objectName = "Category 1");
		}
	}

	@description = "Story ID: LPS-146913 | Test Summary: Verify if as an Administrator I am able to add a Routine"
	@priority = 5
	test AdminCanAddRoutine {
		task ("When the user add a new Routine") {
			Testray.clickTableEntry(tableEntry = ${projectName});

			TestrayRoutines.createRoutine(routineName = ${routineName});
		}

		task ("Then the Routine should appear on the list") {
			Testray.viewTableEntryList(listEntry = ${routineName});
		}
	}

	@description = "Story ID: LPS-146913 | Test Summary: Verify if as an Administrator I am able to delete a Routine"
	@priority = 5
	test AdminCanDeleteRoutine {
		task ("Given that the user add a new Routine") {
			JSONTestray.addRoutine(
				projectName = ${projectName},
				routineName = ${routineName});

			Testray.clickTableEntry(tableEntry = ${projectName});
		}

		task ("Then the routine should appear on the list") {
			Testray.viewTableEntryList(listEntry = ${routineName});
		}

		task ("And when a routine is deleted") {
			Testray.deleteItem(itemName = ${routineName});
		}

		task ("Then the routine should not appear on the list") {
			Testray.viewTableEntryListNotPresent(listEntry = ${routineName});
		}
	}

	@description = "Story ID: LPS-146913 | Test Summary: Verify if as an Administrator I should be able to delete a routine that contains builds"
	@priority = 4
	test AdminCanDeleteRoutineWithBuilds {
		task ("Given that the user add a new Routine and a new Case") {
			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = "Team 1");

			JSONTestray.addComponent(
				componentName = "Component 1",
				projectName = ${projectName},
				teamName = "Team 1");

			JSONTestray.addRoutine(
				projectName = ${projectName},
				routineName = ${routineName});

			JSONTestray.addCases(
				caseName = "Case 1",
				caseType = "Case Type 1",
				componentName = "Component 1",
				projectName = ${projectName});

			Testray.clickTableEntry(tableEntry = ${projectName});

			Navigator.gotoNavTab(navTab = "Routines");
		}

		task ("When the user goes add a new build with enviroments") {
			JSONTestray.addEnvironmentFactors(environmentFactorsName = "Environment Factors 1");

			JSONTestray.addProductVersion(
				productVersion = "1.2",
				projectName = ${projectName});

			JSONTestray.addBuild(
				buildName = "Build 1",
				productVersion = "1.2",
				projectName = ${projectName},
				routineName = ${routineName});

			Testray.clickTableEntry(tableEntry = ${routineName});

			Testray.viewTableEntryList(listEntry = "Build 1");

			TestrayDropdown.goToResultSidebar();
		}

		task ("And when a routine is deleted") {
			JSONTestrayAPI.deleteObjectViaAPI(
				object = "routines",
				objectName = ${routineName});
		}

		task ("Then the routine should not appear on the list") {
			Testray.changePagination(quantity = 150);

			Testray.clickTableEntry(tableEntry = ${projectName});

			Testray.viewTableEntryListNotPresent(listEntry = ${routineName});
		}

		task ("Delete objects") {
			JSONTestrayAPI.deleteObjectViaAPI(
				object = "factorcategories",
				objectName = "Category 1");
		}
	}

	@description = "Story ID: LPS-146913 | Test Summary: Verify if as an Administrator I am able to edit a Routine"
	@priority = 5
	test AdminCanEditRoutine {
		task ("Given that the user add a new Routine") {
			JSONTestray.addRoutine(
				projectName = ${projectName},
				routineName = ${routineName});

			Testray.clickTableEntry(tableEntry = ${projectName});
		}

		task ("When the user goes to edit the Routine and change the name") {
			SelectFrameTop();

			TestrayRoutines.editRoutine(
				newName = "Routine 1 Edited",
				tableEntry = ${routineName});
		}

		task ("Then the Routine should be updated on the list") {
			Testray.viewTableEntryList(listEntry = "Routine 1 Edited");
		}
	}

	@description = "Story ID: LPS-165582 | Test Summary: Verify if as an Administrator I should not be able to add a duplicate routine"
	@priority = 3
	test AdminCanNotAddDuplicateRoutine {
		task ("Given that the user add Routine with duplicated name") {
			JSONTestray.addRoutine(
				projectName = ${projectName},
				routineName = ${routineName});

			Testray.clickTableEntry(tableEntry = ${projectName});

			TestrayRoutines.createRoutine(routineName = ${routineName});
		}

		task ("Then the error message should appear") {
			Alert.viewErrorMessage(errorMessage = "The Routine name already exists");
		}
	}

	@description = "Story ID: LPS-146913 | Test Summary: Verify that the user can not create a routine if all the required fields are not filled in"
	@priority = 2
	test AdminCanViewRequiredField {
		task ("Given that the user add a new Routine without name") {
			Testray.clickTableEntry(tableEntry = ${projectName});

			TestrayRoutines.createRoutine(routineName = "");
		}

		task ("Then a warning message is displayed") {
			Testray.viewErrorMessage(
				fieldLabel = "Name",
				warningMessage = "name is a required field");
		}
	}

	@description = "Story ID: LPS-146908 | Test Summary: Verify the user can access a project on Project Directory"
	@priority = 2
	test CanGoToProjectDirectory {
		task ("Given that the user add a new Project") {
			JSONTestray.addProject(
				projectDescription = "Project Description 2",
				projectName = "Project 2");
		}

		task ("And the user goes to the new Project from the project directory") {
			Testray.clickTableEntry(tableEntry = ${projectName});

			Testray.assertProjectTitleHeader(projectName = ${projectName});

			TestrayDropdown.selectProjectDirectory(project = "Project 2");
		}

		task ("Then the user goes to another project") {
			Testray.assertProjectTitleHeader(projectName = "Project 2");
		}

		task ("Delete project") {
			JSONTestrayAPI.deleteProject(projectName = "Project 2");
		}
	}

}
@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	var buildName = "Build 1";
	var caseName = "Case 1";
	var caseResultName = "case result 1";
	var caseType = "Case Type 1";
	var componentName = "Component 1";
	var environmentFactorsName = "Environment Factors 1";
	var productVersion = "1.2";
	var projectName = "Project 1";
	var routineName = "Routine 1";
	var runName = "Option 1";
	var taskName = "Task_1";
	var teamName = "Team 1";
	var testSiteName = "Testray 2";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Testray Site") {
			HeadlessSite.addSite(
				siteName = ${testSiteName},
				templateName = "Testray",
				templateType = "Site Initializer");
		}

		task ("Add a user via API") {
			JSONUser.addUser(
				userEmailAddress = "user@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");
		}

		task ("create project, routine, team, component, case, case type, enviroment factor, product version, build, category, option, run, case result, task and subtask via API") {
			JSONTestray.addProject(
				projectDescription = "Project Description 1",
				projectName = ${projectName});

			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addComponent(
				componentName = ${componentName},
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addRoutine(
				projectName = ${projectName},
				routineName = ${routineName});

			JSONTestray.addCaseType(caseType = ${caseType});

			JSONTestray.addCases(
				caseName = ${caseName},
				caseType = ${caseType},
				componentName = ${componentName},
				projectName = ${projectName});

			JSONTestray.addEnvironmentFactors(environmentFactorsName = ${environmentFactorsName});

			JSONTestray.addProductVersion(
				productVersion = ${productVersion},
				projectName = ${projectName});

			JSONTestray.addBuild(
				buildName = ${buildName},
				productVersion = ${productVersion},
				projectName = ${projectName},
				routineName = ${routineName});

			JSONTestray.addRun(
				buildName = ${buildName},
				runName = ${runName});

			JSONTestray.addCaseResult(
				buildName = ${buildName},
				caseName = ${caseName},
				caseResultName = ${caseResultName},
				componentName = ${componentName},
				runName = ${runName});

			JSONTestray.addTask(
				buildName = ${buildName},
				key = "INANALYSIS",
				statusTask = "In Analysis",
				taskName = ${taskName});

			JSONTestray.addSubtask(
				key = "OPEN",
				score = 3,
				statusSubtask = "Open",
				subtaskName = "Subtask_1",
				subtaskNumber = 1,
				taskName = ${taskName});

			JSONTestray.addSubtask(
				key = "OPEN",
				score = 3,
				statusSubtask = "Open",
				subtaskName = "Subtask_2",
				subtaskNumber = 2,
				taskName = ${taskName});
		}

		task ("Go to Testray Site") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});
		}

		task ("Go to Task") {
			TestrayTestflow.goToTestflow();

			Testray.clickTableEntry(tableEntry = "Task_1");

			Refresh();
		}
	}

	tearDown {
		task ("Delete subtask, task, routine, case type, factor category and project via API") {
			JSONTestrayAPI.deleteObjectViaAPI(
				object = "subtasks",
				objectName = "Subtask_1");

			JSONTestrayAPI.deleteObjectViaAPI(
				object = "subtasks",
				objectName = "Subtask_2");

			JSONTestrayAPI.deleteObjectViaAPI(
				object = "tasks",
				objectName = ${taskName});

			JSONTestrayAPI.deleteObjectViaAPI(
				object = "routines",
				objectName = ${routineName});

			JSONTestrayAPI.deleteObjectViaAPI(
				object = "casetypes",
				objectName = ${caseType});

			JSONTestrayAPI.deleteObjectViaAPI(
				object = "factorcategories",
				objectName = "Category 1");

			JSONTestrayAPI.deleteProject(projectName = ${projectName});
		}

		task ("Delete user via API, Testray Site and Client Extensions") {
			JSONUser.deleteUserByEmailAddress(userEmailAddress = "user@liferay.com");

			Testray.testrayApisTearDown();
		}

		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Story ID: LPS-166230 | Test Summary: Verify that, as the Administrator, should be able to assign me a subtask that has been assigned to an offline user from the context menu"
	@priority = 3
	test AdminCanAssignToMeSubtaskAssignedToTheOfflineUser {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that the user different assign a subtask") {
			Testray.clickTableEntry(tableEntry = "Subtask_1");

			Button.click(button = "Assign and Begin Analysis");

			TestrayTestflow.assignUsers(userName = "userfn userln");

			TestrayTestflow.userAvatarPresent(
				label = "Subtask Details",
				status = "userfn userln");
		}

		task ("When the user logged in assign the subtask") {
			Button.click(button = "Assign");

			TestrayTestflow.assignUsers(userName = "Test Test");
		}

		task ("Then the user logged in should appear on the list") {
			TestrayTestflow.userAvatarPresent(
				label = "Subtask Details",
				status = "Test Test");
		}
	}

	@description = "Story ID: LPS-166230 | Test Summary: Verify if, as an Administrator, can cancel merge subtasks"
	@priority = 2
	test AdminCanCancelMergeSubtask {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that the user trying merge subtasks") {
			TestrayTestflow.assertStatus(
				label = "Subtasks",
				status = "Open");

			Testray.selectUsers(listUserName = "Test Test");
		}

		task ("When can clear the merge") {
			TestraySubtask.mergeSubtasks(
				buttonClear = "true",
				wcsubtaskName = "Subtask_1,Subtask_2");

			Testray.clickTableEntry(tableEntry = "Subtask_1");
		}

		task ("Then can not see the merged subtask") {
			TestraySubtask.assertNotMergedSubtasks(subtask = "Subtask_2");
		}
	}

	@description = "Story ID: LPS-164984 | Test Summary: Verify if as an Administrator I should be able to complete a subtask as Blocked"
	@priority = 3
	test AdminCanCompleteSubtaskAsBlocked {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given the user edit a Subtask as Blocked") {
			TestrayTestflow.assertStatus(
				label = "Subtasks",
				status = "Open");

			TestrayManage.selectTableRowOption(
				rowOption = "Assign and Begin Analysis",
				tableEntry = "Subtask_1");

			TestrayTestflow.assignUsers(userName = "Test Test");

			TestrayManage.selectTableRowOption(
				rowOption = "Complete",
				tableEntry = "Subtask_1");

			TestrayTestflow.editStatus(
				comment = "button does not work",
				issues = "LPS-166191",
				selectStatus = "Blocked");

			WaitForPageLoad();
		}

		task ("Then the complete status appears of the subtask with details") {
			Testray.clickTableEntry(tableEntry = "Subtask_1");

			TestraySubtask.verifySubtaskDetails(
				comment = "button does not work",
				issues = "LPS-166191",
				score = 3,
				status = "Complete",
				updated = "a few seconds ago",
				userName = "Test Test");
		}
	}

	@description = "Story ID: LPS-164984 | Test Summary: Verify if as an Administrator I should be able to complete a subtask as failing"
	@priority = 3
	test AdminCanCompleteSubtaskAsFailing {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given the user edit a Subtask as Failed") {
			TestrayTestflow.assertStatus(
				label = "Subtasks",
				status = "Open");

			TestrayManage.selectTableRowOption(
				rowOption = "Assign and Begin Analysis",
				tableEntry = "Subtask_1");

			TestrayTestflow.assignUsers(userName = "Test Test");

			TestrayManage.selectTableRowOption(
				rowOption = "Complete",
				tableEntry = "Subtask_1");

			TestrayTestflow.editStatus(
				comment = "button does not work",
				issues = "LPS-166191",
				selectStatus = "Failed");

			WaitForPageLoad();
		}

		task ("Then the complete status appears of the subtask with details") {
			Testray.clickTableEntry(tableEntry = "Subtask_1");

			TestraySubtask.verifySubtaskDetails(
				comment = "button does not work",
				issues = "LPS-166191",
				score = 3,
				status = "Complete",
				updated = "a few seconds ago",
				userName = "Test Test");
		}
	}

	@description = "Story ID: LPS-164984 | Test Summary: Verify if as an Administrator I should be able to complete a subtask as passing"
	@priority = 5
	test AdminCanCompleteSubtaskAsPassing {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given the user edit a Subtask as passed") {
			TestrayTestflow.assertStatus(
				label = "Subtasks",
				status = "Open");

			TestrayManage.selectTableRowOption(
				rowOption = "Assign to Me and Begin Analysis",
				tableEntry = "Subtask_1");

			TestrayManage.selectTableRowOption(
				rowOption = "Complete",
				tableEntry = "Subtask_1");

			TestrayTestflow.editStatus(selectStatus = "Passed");

			WaitForPageLoad();
		}

		task ("Then the complete status appears of the subtask") {
			TestrayTestflow.assertStatus(
				label = "Subtasks",
				status = "Complete");
		}
	}

	@description = "Story ID: LPS-164984 | Test Summary: Verify if as an Administrator I should be able to complete a subtask as Test Fix"
	@priority = 3
	test AdminCanCompleteSubtaskAsTestFix {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given the user edit a Subtask as Test Fix") {
			TestrayTestflow.assertStatus(
				label = "Subtasks",
				status = "Open");

			Testray.clickTableEntry(tableEntry = "Subtask_1");

			Button.click(button = "Assign and Begin Analysis");

			TestrayTestflow.assignUsers(userName = "Test Test");

			Button.click(button = "Complete");

			TestrayTestflow.editStatus(
				comment = "button does not work",
				issues = "LPS-166191",
				selectStatus = "Test Fix");

			WaitForPageLoad();
		}

		task ("Then the complete status appears of the subtask with details") {
			TestraySubtask.verifySubtaskDetails(
				comment = "button does not work",
				issues = "LPS-166191",
				score = 3,
				status = "Complete",
				updated = "a few seconds ago",
				userName = "Test Test");
		}
	}

	@description = "Story ID: LPS-166230 | Test Summary: Verify that can complete a subtask after have merged it"
	@priority = 5
	test AdminCanCompleteSubtaskThatBeenMerged {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that the user logged in assign a subtask") {
			TestrayManage.selectTableRowOption(
				rowOption = "Assign and Begin Analysis",
				tableEntry = "Subtask_1");

			TestrayTestflow.assignUsers(userName = "Test Test");
		}

		task ("When the user merging the subtask") {
			TestraySubtask.mergeSubtasks(wcsubtaskName = "Subtask_1,Subtask_2");
		}

		task ("Then the alert message is displayed") {
			Testray.clickTableEntry(tableEntry = "Subtask_1");

			Button.click(button = "Complete");

			TestrayTestflow.editStatus(selectStatus = "Passed");
		}

		task ("Then the alert message is displayed") {
			TestrayTestflow.assertStatus(
				label = "Subtask Details",
				status = "Complete");
		}
	}

	@description = "Story ID: LPS-166230 | Test Summary: Verify if as  an Administrator I should be able to merge an Complete subtask with a Open subtask"
	@priority = 3
	test AdminCanMergeCompleteSubtaskWithOpenSubtask {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that the user complete a Subtask") {
			TestrayTestflow.assertStatus(
				label = "Subtasks",
				status = "Open");

			TestrayManage.selectTableRowOption(
				rowOption = "Assign and Begin Analysis",
				tableEntry = "Subtask_1");

			TestrayTestflow.assignUsers(userName = "Test Test");

			TestrayManage.selectTableRowOption(
				rowOption = "Complete",
				tableEntry = "Subtask_1");

			TestrayTestflow.editStatus(selectStatus = "Passed");

			TestrayTestflow.assertStatus(
				label = "Subtasks",
				status = "Complete");
		}

		task ("When the user merged a subtask with status complete with other open Subtask") {
			TestrayTestflow.assertStatus(
				label = "Subtasks",
				status = "Open");

			TestraySubtask.mergeSubtasks(wcsubtaskName = "Subtask_1,Subtask_2");
		}

		task ("Then the user can see a merged subtask in subtask details") {
			Testray.clickTableEntry(tableEntry = "Subtask_1");

			TestraySubtask.assertMergedSubtasks(listSubtaskMerged = "Subtask_2");
		}
	}

	@description = "Story ID: LPS-166230 | Test Summary: Verify if as  an Administrator I should be able to merge an in analysis subtask with a completed subtask"
	@priority = 4
	test AdminCanMergeInAnalysisSubtaskWithCompletedSubtask {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that the user complete a Subtask") {
			TestrayTestflow.assertStatus(
				label = "Subtasks",
				status = "Open");

			TestrayManage.selectTableRowOption(
				rowOption = "Assign and Begin Analysis",
				tableEntry = "Subtask_1");

			TestrayTestflow.assignUsers(userName = "Test Test");

			TestrayManage.selectTableRowOption(
				rowOption = "Complete",
				tableEntry = "Subtask_1");

			TestrayTestflow.editStatus(
				comment = "button does not work",
				issues = "LPS-166193",
				selectStatus = "Blocked");

			WaitForPageLoad();

			TestrayTestflow.assertStatus(
				label = "Subtasks",
				status = "Complete");
		}

		task ("When that the user leave in analysis the other Subtask") {
			TestrayTestflow.assertStatus(
				label = "Subtasks",
				status = "Open");

			Testray.clickTableEntry(tableEntry = "Subtask_2");

			Button.click(button = "Assign and Begin Analysis");

			TestrayTestflow.assignUsers(userName = "Test Test");

			TestrayTestflow.assertStatus(
				label = "Subtask Details",
				status = "In Analysis");
		}

		task ("Then the user merged subtask with status complete") {
			TestrayTestflow.goToTestflow();

			Testray.clickTableEntry(tableEntry = "Task_1");

			TestraySubtask.mergeSubtasks(wcsubtaskName = "Subtask_1,Subtask_2");
		}

		Testray.clickTableEntry(tableEntry = "Subtask_1");

		TestraySubtask.assertMergedSubtasks(listSubtaskMerged = "Subtask_2");
	}

	@description = "Story ID: LPS-166230 | Test Summary: Verify that, as Administrator, should not be able to edit subtask with user logged off"
	@priority = 3
	test AdminCanNotEditSubtaskWithUserOffline {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that the user different assign a subtask") {
			Testray.clickTableEntry(tableEntry = "Subtask_1");

			Button.click(button = "Assign and Begin Analysis");

			TestrayTestflow.assignUsers(userName = "userfn userln");
		}

		task ("When the user different trying complete a subtask") {
			Button.click(button = "Complete");
		}

		task ("Then the alert message is displayed") {
			Testray.viewAlert(alertText = "You are not the assigned user.");
		}
	}

	@description = "Story ID: LPS-166230 | Test Summary: Verify that, as an Administrator, should not be able to merge only one subtask"
	@priority = 3
	test AdminCanNotMergeOnlyOneSubtask {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("When the user trying merging a single subtask") {
			TestraySubtask.mergeSubtasks(wcsubtaskName = "Subtask_1");
		}

		task ("Then the alert message is displayed") {
			AssertElementPresent(
				key_alertMessage = "Please select at least two subtasks to merge.",
				locator1 = "Message#ERROR_ENTER_A_VALID_VALUE");
		}
	}

	@description = "Story ID: LPS-166230 | Test Summary: Verify that, as an Administrator, should not be able to merge subtasks with different users"
	@priority = 4
	test AdminCanNotMergeSubtasksWithDifferentUsers {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that the user different assign a subtask") {
			TestrayManage.selectTableRowOption(
				rowOption = "Assign and Begin Analysis",
				tableEntry = "Subtask_1");

			TestrayTestflow.assignUsers(userName = "userfn userln");
		}

		task ("And the user logged in assign a subtask") {
			TestrayManage.selectTableRowOption(
				rowOption = "Assign and Begin Analysis",
				tableEntry = "Subtask_2");

			TestrayTestflow.assignUsers(userName = "Test Test");
		}

		task ("When the user trying merging the subtask assigned to different users") {
			TestraySubtask.mergeSubtasks(wcsubtaskName = "Subtask_1,Subtask_2");
		}

		task ("Then the alert message is displayed") {
			AssertElementPresent(
				key_alertMessage = "Subtask Subtask_1 must be assigned to you to be used in a merge.",
				locator1 = "Message#ERROR_ENTER_A_VALID_VALUE");
		}
	}

	@description = "Story ID: LPS-166230 | Test Summary: Verify that can reanalyze a subtask"
	@priority = 4
	test AdminCanReanalyzeSubtask {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that the user assign a subtask") {
			Testray.clickTableEntry(tableEntry = "Subtask_1");

			Button.click(button = "Assign and Begin Analysis");

			TestrayTestflow.assignUsers(userName = "Test Test");
		}

		task ("And the user complete the subtask") {
			Button.click(button = "Complete");

			TestrayTestflow.editStatus(selectStatus = "Passed");

			TestrayTestflow.assertStatus(
				label = "Subtask Details",
				status = "Complete");
		}

		task ("When the user reanalyze the subtask") {
			Button.click(button = "Assign and Reanalyze");

			TestrayTestflow.assignUsers(userName = "Test Test");
		}

		task ("Then the status in analysis should appear on the list") {
			TestrayTestflow.assertStatus(
				label = "Subtask Details",
				status = "In Analysis");
		}
	}

	@description = "Story ID: LPS-164984 | Test Summary: Verify if as an Administrator I should be able a subtask return to open"
	@priority = 3
	test AdminCanReturnToOpenSubtask {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("When that the user Assign and Begin Analysis of the subtask") {
			TestrayTestflow.assertStatus(
				label = "Subtasks",
				status = "Open");

			Testray.clickTableEntry(tableEntry = "Subtask_1");

			Button.click(button = "Assign and Begin Analysis");

			TestrayTestflow.assignUsers(userName = "Test Test");

			TestrayTestflow.assertStatus(
				label = "Subtask Details",
				status = "In Analysis");
		}

		task ("Then can return to open the subtask") {
			Button.click(button = "Return to open");

			TestrayTestflow.assertStatus(
				label = "Subtask Details",
				status = "Open");
		}
	}

	@description = "Story ID: LPS-166230 | Test Summary: Verify if as an Administrator I should be able to merge multiple unassigned subtasks"
	@priority = 3
	test AdminShouldBeAbleToMergeMultipleUnassignedSubtasks {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("When the user merged a subtask with status open") {
			TestrayTestflow.assertStatus(
				label = "Subtasks",
				status = "Open");

			TestraySubtask.mergeSubtasks(wcsubtaskName = "Subtask_1,Subtask_2");

			Testray.clickTableEntry(tableEntry = "Subtask_1");
		}

		task ("Then can see the merged subtask") {
			TestraySubtask.assertMergedSubtasks(listSubtaskMerged = "Subtask_2");
		}
	}

}
@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	var testSiteName = "Testray 2";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Testray Site") {
			HeadlessSite.addSite(
				siteName = ${testSiteName},
				templateName = "Testray",
				templateType = "Site Initializer");
		}

		task ("Go to Testray and go to Change password") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			TestrayDropdown.selectOptionSidebar(
				buttonOption = "Manage",
				menuItem = "Manage Users");

			Testray.clickTableEntry(tableEntry = "test@liferay.com");

			Button.click(button = "Change Password");
		}
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		Testray.testrayApisTearDown();

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Story ID: LPS-156040 | Test Summary: Verify that can log in with the new password after changing it"
	@ignore = "true"
	@priority = 5
	test CanLoginWithChangedPassword {
		task ("When the user changes the password correctly") {
			Type(
				locator1 = "TextInput#CURRENT_PASSWORD",
				value1 = "test");

			Type(
				locator1 = "TextInput#NEW_PASSWORD",
				value1 = "TestTest");

			Type(
				locator1 = "TestrayUser#CONFIRM_PASSWORD",
				value1 = "TestTest");

			Button.clickSave();

			Testray.signOutTestray();
		}

		task ("Then the user can log in to Testray 2 with modified password") {
			Navigator.openSpecificURL(url = "http://localhost:8080/web/testray-2");

			TestraySignIn.addEmailTestray(key_itemvalue = "test@liferay.com");

			TestraySignIn.addPasswordTestray(key_itemvalue = "TestTest");

			TestraySignIn.buttonSignInTestray();

			AssertElementPresent(
				key_button = "Results",
				locator1 = "TestrayDropdown#SIDEBAR_CONTENT");
		}
	}

	@description = "Story ID: LPS-156040 | Test Summary: Verify that the message 'The current password is incorrect' appears, when enter an incorrect current password"
	@priority = 4
	test CanViewCurrentPasswordIncorrect {
		task ("When the user tries to save password with current passwords incorrect") {
			Type(
				locator1 = "TextInput#CURRENT_PASSWORD",
				value1 = "test123");

			Type(
				locator1 = "TextInput#NEW_PASSWORD",
				value1 = "TestTest");

			Type(
				locator1 = "TestrayUser#CONFIRM_PASSWORD",
				value1 = "TestTest");

			Button.clickSave();
		}

		task ("Then an incorrect current password message is displayed") {
			Testray.viewErrorMessage(
				fieldLabel = "Current Password",
				warningMessage = "Current password is incorrect.");
		}
	}

	@description = "Story ID: LPS-156040 | Test Summary: Verify if an alert will appear when user does not fill a mandatory field"
	@priority = 2
	test CanViewFieldRequired {
		task ("When the user tries to save password without filling out the required fields") {
			Button.clickSave();
		}

		task ("Then a field required message is displayed") {
			Testray.viewErrorMessage(
				fieldLabel = "Current Password",
				warningMessage = "This field is required.");

			Testray.viewErrorMessage(
				fieldLabel = "New Password",
				warningMessage = "This field is required.");

			Testray.viewErrorMessage(
				fieldLabel = "Confirm Password",
				warningMessage = "This field is required.");
		}
	}

	@description = "Story ID: LPS-156040 | Test Summary: Verify that the New Password field displays the message 'minimum 8 characters.' if less than 8 characters are entered"
	@priority = 3
	test CanViewMinimumEightCharacters {
		task ("When the user tries to save password without Minimum Eight Characters") {
			Type(
				locator1 = "TextInput#NEW_PASSWORD",
				value1 = "Test");

			Button.clickSave();
		}

		task ("Then an error message appears requiring a password with a minimum of eight characters") {
			Testray.viewErrorMessage(
				fieldLabel = "New Password",
				warningMessage = "Minimum 8 characters.");
		}
	}

	@description = "Story ID: LPS-156040 | Test Summary: Verify that the message 'Passwords do not match' appears, when the passwords are different"
	@priority = 4
	test CanViewPasswordNotMatch {
		task ("When the user tries to save password with passwords different") {
			Type(
				locator1 = "TextInput#NEW_PASSWORD",
				value1 = "TestTest");

			Type(
				locator1 = "TestrayUser#CONFIRM_PASSWORD",
				value1 = "Test");

			Button.clickSave();
		}

		task ("Then a different password error message appears") {
			Testray.viewErrorMessage(
				fieldLabel = "Confirm Password",
				warningMessage = "Passwords do not match.");
		}
	}

}
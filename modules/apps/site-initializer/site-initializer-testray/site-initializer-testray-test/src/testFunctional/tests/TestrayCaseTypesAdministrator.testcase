@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	var caseType = "Case Type 1";
	var testSiteName = "Testray 2";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Testray Site") {
			HeadlessSite.addSite(
				siteName = ${testSiteName},
				templateName = "Testray",
				templateType = "Site Initializer");
		}
	}

	tearDown {
		task ("Delete Testray Site and Client Extensions") {
			Testray.testrayApisTearDown();
		}

		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Story ID: LPS-146938 | Test Summary: Verify if the Administrator can Add Case Types"
	@priority = 5
	test AdminCanAddCaseTypes {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("When I create a Case Type") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			TestrayLayout.clickManageOnSidebar();

			TestrayManage.selectOptionsManage(itemValue = "Case Types");

			TestrayManage.createCaseTypes(caseName = ${caseType});
		}

		task ("Then I assert that the newly created 'Case Type' is present in the list") {
			Testray.viewTableEntryList(listEntry = ${caseType});
		}

		task ("Delete object") {
			JSONTestrayAPI.deleteObjectViaAPI(
				object = "casetypes",
				objectName = ${caseType});
		}
	}

	@description = "Story ID: LPS-146938 | Test Summary: Verify that as an Administrator I can delete Case Types"
	@priority = 5
	test AdminCanDeleteCaseTypes {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that I create a 'Case Type' via API") {
			JSONTestray.addCaseType(caseType = ${caseType});
		}

		task ("When I go to the manage menu") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			TestrayLayout.clickManageOnSidebar();
		}

		task ("And I select the system 'Case Types' option") {
			TestrayManage.selectOptionsManage(itemValue = "Case Types");

			Testray.changePagination(
				modal = "true",
				quantity = 150);
		}

		task ("When I delete a Case Type") {
			TestrayManage.deleteCasesTypes(tableEntry = ${caseType});
		}

		task ("Then I shouldn't be able to see the same in the list") {
			Testray.viewTableEntryListNotPresent(listEntry = ${caseType});
		}
	}

	@description = "Story ID: LPS-146938 | Test Summary: Verify if the Administrator can Edit Case Types"
	@priority = 5
	test AdminCanEditCaseTypes {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that I create a 'Case Type' via API") {
			JSONTestray.addCaseType(caseType = ${caseType});
		}

		task ("When I go to the manage menu") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			TestrayLayout.clickManageOnSidebar();
		}

		task ("And I select the system 'Case Types' option") {
			TestrayManage.selectOptionsManage(itemValue = "Case Types");

			Testray.changePagination(
				modal = "true",
				quantity = 150);
		}

		task ("And I edit the name of the Case Type") {
			TestrayManage.editCaseType(
				newName = "Case Type Edited",
				tableEntry = ${caseType});
		}

		task ("Then I assert that the name has been changed in the list") {
			Testray.viewTableEntryList(listEntry = "Case Type Edited");
		}

		task ("Delete object") {
			JSONTestrayAPI.deleteObjectViaAPI(
				object = "casetypes",
				objectName = "Case Type Edited");
		}
	}

	@description = "Story ID: LPS-165582 | Test Summary: Verify if as an Administrator I should not be able to add a duplicate cases types"
	@priority = 3
	test AdminCanNotAddDuplicateCasesTypes {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that I create a 'Case Type' via API") {
			JSONTestray.addCaseType(caseType = ${caseType});
		}

		task ("When I go to the manage menu") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			TestrayLayout.clickManageOnSidebar();
		}

		task ("And I select the system 'Case Types' option") {
			TestrayManage.selectOptionsManage(itemValue = "Case Types");

			Testray.changePagination(
				modal = "true",
				quantity = 150);
		}

		task ("When I try to create a new Case Type with an existing title") {
			TestrayManage.createCaseTypes(caseName = ${caseType});
		}

		task ("Then an error message is shown") {
			Alert.viewErrorMessage(errorMessage = "The Case Type name already exists");
		}
	}

	@description = "Story ID: LPS-146938 | Test Summary: Verify that the user can not create a case type if all the required fields are not filled in"
	@priority = 2
	test AdminCanViewRequiredField {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("When I go to the manage menu") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			TestrayLayout.clickManageOnSidebar();
		}

		task ("Create a new Case Type and assert message of required field") {
			TestrayManage.selectOptionsManage(itemValue = "Case Types");

			Testray.changePagination(
				modal = "true",
				quantity = 150);

			TestrayManage.createCaseTypes(caseName = "");

			Testray.viewErrorMessage(
				fieldLabel = "Name",
				warningMessage = "name is a required field");
		}
	}

}
@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	var caseName = "Case 1";
	var caseType = "Case Type 1";
	var componentName = "Component 1";
	var environmentFactorsName = "Environment Factors 1";
	var productVersion = "1.2";
	var projectName = "Project 1";
	var routineName = "Routine 1";
	var teamName = "Team 1";
	var testSiteName = "Testray 2";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Testray Site") {
			HeadlessSite.addSite(
				siteName = ${testSiteName},
				templateName = "Testray",
				templateType = "Site Initializer");
		}

		task ("Create project, team, component, routine, case type, case, environment factor and product version via API") {
			JSONTestray.addProject(
				projectDescription = "Project Description 1",
				projectName = ${projectName});

			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addComponent(
				componentName = ${componentName},
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addRoutine(
				projectName = ${projectName},
				routineName = ${routineName});

			JSONTestray.addCaseType(caseType = ${caseType});

			JSONTestray.addCases(
				caseName = ${caseName},
				caseType = ${caseType},
				componentName = ${componentName},
				projectName = ${projectName});

			JSONTestray.addEnvironmentFactors(environmentFactorsName = ${environmentFactorsName});

			JSONTestray.addProductVersion(
				productVersion = ${productVersion},
				projectName = ${projectName});
		}

		task ("Go to Testray Site") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(quantity = 150);
		}

		task ("Go to routine page") {
			Testray.clickTableEntry(tableEntry = ${projectName});

			Testray.clickTableEntry(tableEntry = ${routineName});
		}
	}

	tearDown {
		task ("Delete factor category, routine, case type and project via API, Testray Site and Client Extensions") {
			JSONTestrayAPI.deleteObjectViaAPI(
				object = "factorcategories",
				objectName = "Category 1");

			JSONTestrayAPI.deleteObjectViaAPI(
				object = "routines",
				objectName = ${routineName});

			JSONTestrayAPI.deleteObjectViaAPI(
				object = "casetypes",
				objectName = ${caseType});

			JSONTestrayAPI.deleteProject(projectName = ${projectName});

			Testray.testrayApisTearDown();
		}

		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Story ID: LPS-178541 | Test Summary: Verify if as an Administrator I should be able to filter by template name"
	@priority = 3
	test AdminCanFilterTemplateByName {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that the user adds two Template") {
			TestrayTemplate.addTemplate(
				description = "Template Description",
				dropdownItem = "New Template",
				fieldName = "Build_Template",
				gitHash = "aeda18721a90a0831e0dca25e175b1408fa9ac2sa",
				routineName = ${routineName});

			TestrayTemplate.addTemplate(
				description = "Template Description",
				dropdownItem = "New Template",
				fieldName = "Build_Template 2",
				gitHash = "aeda18721a90a0831e0dca25e175b1408fa9ac2sa",
				routineName = ${routineName});

			Testray.kebabMenuOption(kebabOption = "Manage Templates");

			TestrayTemplate.viewTemplateDetails(
				templateName = "Build_Template",
				templateStatus = "Activated");
		}

		task ("And Deactivated Build_Template 2") {
			TestrayManage.selectTableRowOption(
				rowOption = "Deactivate",
				tableEntry = "Build_Template 2");

			TestrayTemplate.viewTemplateDetails(
				templateName = "Build_Template 2",
				templateStatus = "Deactivated");

			Click(
				key_indexNumber = 2,
				key_text = "Clear",
				locator1 = "Button#ANY_N");
		}

		task ("When the user filter a template by name") {
			TestrayFilter.clickFilter();

			TestrayFilter.typeFilter(
				label = "Template Name",
				value = "Build_Template 2");
		}

		task ("Then the user see only the Build_Template 2 in the table") {
			Testray.viewTableEntryList(listEntry = "Build_Template 2");
		}

		task ("And do not see Build_Template in the table") {
			Testray.viewTableEntryListNotPresent(listEntry = "Build_Template");
		}
	}

	@description = "Story ID: LPS-162435 | Test Summary: Verify if as an Administrator I should not be able to add a duplicate template"
	@priority = 3
	test AdminCanNotAddDuplicateTemplate {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that the user adds a Template") {
			TestrayTemplate.addTemplate(
				description = "Template Description",
				dropdownItem = "New Template",
				fieldName = "Build_Template",
				gitHash = "ae4a18721aa0a0831e0dca25e175b1408fa9ac2sa",
				routineName = ${routineName});
		}

		task ("When the user tries add a duplicate template") {
			TestrayTemplate.addTemplate(
				description = "Template Description",
				dropdownItem = "New Template",
				fieldName = "Build_Template",
				gitHash = "aeda18721a90a0831e0dca25e175b1408fa9ac2sa",
				routineName = ${routineName});
		}

		task ("Then the error message should appear") {
			Alert.viewErrorMessage(errorMessage = "The Build name already exists.");
		}
	}

	@description = "Story ID: LPS-178541 | Test Summary: Verify if as an Administrator I should not see template that don't exist when I try filtering for them"
	@priority = 3
	test AdminCanNotFilterForNonExistentTemplate {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that the user add build Template") {
			TestrayTemplate.addTemplate(
				description = "Template Description",
				dropdownItem = "New Template",
				fieldName = "Build_Template",
				gitHash = "aeda18721a90a0831e0dca25e175b1408fa9ac2sa",
				routineName = ${routineName});

			Testray.kebabMenuOption(kebabOption = "Manage Templates");

			TestrayTemplate.viewTemplateDetails(
				templateName = "Build_Template",
				templateStatus = "Activated");
		}

		task ("When the user filter a template non existent") {
			TestrayFilter.clickFilter();

			TestrayFilter.typeFilter(
				label = "Template Name",
				value = "Build_Template 3");
		}

		task ("Then the user not see the Build_Template 3 in the table") {
			Testray.viewTableEntryListNotPresent(listEntry = "Build_Template 3");
		}
	}

	@description = "Story ID: LPS-162439 | Test Summary: Verify if that can Activate Disabled Template"
	@priority = 4
	test CanActivateDisabledTemplate {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that the user adds a Template with status Activated") {
			TestrayTemplate.addTemplate(
				description = "Template Description",
				dropdownItem = "New Template",
				fieldName = "Build_Template",
				gitHash = "aeda18721a90a0831e0dca25e175b1408fa9ac2sa",
				routine = ${routineName});

			Testray.kebabMenuOption(kebabOption = "Manage Templates");

			TestrayTemplate.viewTemplateDetails(
				templateName = "Build_Template",
				templateStatus = "Activated");
		}

		task ("When the user changed the status of Deactivated for Activated") {
			TestrayManage.selectTableRowOption(
				rowOption = "Deactivate",
				tableEntry = "Build_Template");

			Click(
				key_indexNumber = 2,
				key_text = "Clear",
				locator1 = "Button#ANY_N");

			TestrayTemplate.viewTemplateDetails(
				templateName = "Build_Template",
				templateStatus = "Deactivated");

			TestrayManage.selectTableRowOption(
				rowOption = "Activate",
				tableEntry = "Deactivated");
		}

		task ("Then the Activated status should appear in the list") {
			Testray.viewTableEntryList(listEntry = "Activated");
		}
	}

	@description = "Story ID: LPS-162439 | Test Summary: Verify that when creating a build with template, it comes with 'Active' status by default"
	@priority = 4
	test CanCreateTemplateWithActiveDefault {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that the user adds a Template") {
			TestrayTemplate.addTemplate(
				description = "Template Description",
				dropdownItem = "New Template",
				fieldName = "Build_Template",
				gitHash = "aeda18721a90a0831e0dca25e175b1408fa9ac2sa",
				routineName = ${routineName});
		}

		task ("Then the status Activated should appear") {
			Testray.kebabMenuOption(kebabOption = "Manage Templates");

			TestrayTemplate.viewTemplateDetails(
				templateName = "Build_Template",
				templateStatus = "Activated");
		}
	}

	@description = "Story ID: LPS-162439 | Test Summary: Verify if can delete an deactived template"
	@priority = 5
	test CanDeleteDeactiveTemplate {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that the user adds a Template with status Deactivated") {
			TestrayTemplate.addTemplate(
				description = "Template Description",
				dropdownItem = "New Template",
				fieldName = "Build_Template",
				gitHash = "aeda18721a90a0831e0dca25e175b1408fa9ac2sa",
				routineName = ${routineName});

			Testray.kebabMenuOption(kebabOption = "Manage Templates");

			TestrayTemplate.viewTemplateDetails(
				templateName = "Build_Template",
				templateStatus = "Activated");

			TestrayManage.selectTableRowOption(
				rowOption = "Deactivate",
				tableEntry = "Build_Template");

			TestrayTemplate.viewTemplateDetails(
				templateName = "Build_Template",
				templateStatus = "Deactivated");
		}

		task ("When the template with Deactivated status is deleted") {
			Testray.deleteItem(itemName = "Deactivated");
		}

		task ("Then the template with Deactivated status should not appear in the list") {
			Testray.viewTableEntryListNotPresent(listEntry = "Deactivated");
		}
	}

	@description = "Story ID: LPS-178541 | Test Summary: Verify that can filter out activated template"
	@priority = 4
	test CanFilterActiveTemplate {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that the user adds two Template") {
			TestrayTemplate.addTemplate(
				description = "Template Description",
				dropdownItem = "New Template",
				fieldName = "Build_Template",
				gitHash = "aeda18721a90a0831e0dca25e175b1408fa9ac2sa",
				routineName = ${routineName});

			TestrayTemplate.addTemplate(
				description = "Template Description",
				dropdownItem = "New Template",
				fieldName = "Build_Template 2",
				gitHash = "aeda18721a90a0831e0dca25e175b1408fa9ac2sa",
				routineName = ${routineName});

			Testray.kebabMenuOption(kebabOption = "Manage Templates");

			TestrayTemplate.viewTemplateDetails(
				templateName = "Build_Template",
				templateStatus = "Activated");
		}

		task ("And Deactivated Build_Template 2") {
			TestrayManage.selectTableRowOption(
				rowOption = "Deactivate",
				tableEntry = "Build_Template 2");

			TestrayTemplate.viewTemplateDetails(
				templateName = "Build_Template 2",
				templateStatus = "Deactivated");

			Click(
				key_indexNumber = 2,
				key_text = "Clear",
				locator1 = "Button#ANY_N");
		}

		task ("When the user filter a template with Activated status") {
			TestrayFilter.clickFilter();

			Select(
				locator1 = "TestrayTestflow#SELECT_STATUS_CASE_RESULTS",
				value1 = "Activated");

			Button.click(button = "Apply");
		}

		task ("Then the user see only the Activated status in the table") {
			Testray.viewTableEntryList(listEntry = "Activated");
		}

		task ("And do not see Deactivated status in the table") {
			Testray.viewTableEntryListNotPresent(listEntry = "Deactivated");
		}
	}

	@description = "Story ID: LPS-178541 | Test Summary: Verify that can filter out deactived template"
	@priority = 3
	test CanFilterDeactivedTemplate {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that the user adds two Template") {
			TestrayTemplate.addTemplate(
				description = "Template Description",
				dropdownItem = "New Template",
				fieldName = "Build_Template",
				gitHash = "aeda18721a90a0831e0dca25e175b1408fa9ac2sa",
				routineName = ${routineName});

			TestrayTemplate.addTemplate(
				description = "Template Description",
				dropdownItem = "New Template",
				fieldName = "Build_Template 2",
				gitHash = "aeda18721a90a0831e0dca25e175b1408fa9ac2sa",
				routineName = ${routineName});

			Testray.kebabMenuOption(kebabOption = "Manage Templates");

			TestrayTemplate.viewTemplateDetails(
				templateName = "Build_Template",
				templateStatus = "Activated");
		}

		task ("And Deactivated Build_Template 2") {
			TestrayManage.selectTableRowOption(
				rowOption = "Deactivate",
				tableEntry = "Build_Template 2");

			TestrayTemplate.viewTemplateDetails(
				templateName = "Build_Template 2",
				templateStatus = "Deactivated");

			Click(
				key_indexNumber = 2,
				key_text = "Clear",
				locator1 = "Button#ANY_N");
		}

		task ("When the user filter a template with Deactivated status") {
			TestrayFilter.clickFilter();

			Select(
				locator1 = "TestrayTestflow#SELECT_STATUS_CASE_RESULTS",
				value1 = "Deactivated");

			Button.click(button = "Apply");
		}

		task ("Then the user see only the Deactivated status in the table") {
			Testray.viewTableEntryList(listEntry = "Deactivated");
		}

		task ("And do not see Activated status in the table") {
			Testray.viewTableEntryListNotPresent(listEntry = "Activated");
		}
	}

	@description = "Story ID: LPS-162435 | Test Summary: Verify if As an administrator can search for the new template created"
	@priority = 3
	test CanSeachTemplate {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given the user adds a template") {
			TestrayTemplate.addTemplate(
				description = "Template Description",
				dropdownItem = "New Template",
				fieldName = "Build_Template",
				gitHash = "aeda18721a90a0831e0dca25e175b1408fa9ac2sa",
				routineName = ${routineName});
		}

		task ("Then can search for the template created in the filter") {
			TestrayTemplate.assertTemplateName(templateName = "Build_Template");
		}
	}

	@description = "Story ID: LPS-162435 | Test Summary: Verify if, as an Administrator, can see the required field message"
	@priority = 2
	test CanViewRequiredField {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("When the user tries add a new template without filling out the required fields") {
			TestrayTemplate.addTemplate(dropdownItem = "New Template");
		}

		task ("Then a required field warning message appears") {
			Testray.viewErrorMessage(
				fieldLabel = "Name",
				warningMessage = "Name is a required field.");
		}
	}

}
@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	var buildName = "Build 1";
	var caseName = "Case 1";
	var caseResultName = "case result 1";
	var caseType = "Case Type 1";
	var componentName = "Component 1";
	var environmentFactorsName = "Environment Factors 1";
	var productVersion = "1.2";
	var projectName = "Project 1";
	var routineName = "Routine 1";
	var runName = "Option 1";
	var teamName = "Team 1";
	var testSiteName = "Testray 2";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Testray Site") {
			HeadlessSite.addSite(
				siteName = ${testSiteName},
				templateName = "Testray",
				templateType = "Site Initializer");
		}

		task ("create project, routine, team, component, case, case type, enviroment factor, product version, build, run and case result via API") {
			JSONTestray.addProject(
				projectDescription = "Project Description 1",
				projectName = ${projectName});

			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addComponent(
				componentName = ${componentName},
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addRoutine(
				projectName = ${projectName},
				routineName = ${routineName});

			JSONTestray.addCaseType(caseType = ${caseType});

			JSONTestray.addCases(
				caseName = ${caseName},
				caseType = ${caseType},
				componentName = ${componentName},
				projectName = ${projectName});

			JSONTestray.addEnvironmentFactors(environmentFactorsName = ${environmentFactorsName});

			JSONTestray.addProductVersion(
				productVersion = ${productVersion},
				projectName = ${projectName});

			JSONTestray.addBuild(
				buildName = ${buildName},
				productVersion = ${productVersion},
				projectName = ${projectName},
				routineName = ${routineName});

			JSONTestray.addRun(
				buildName = ${buildName},
				runName = ${runName});

			JSONTestray.addCaseResult(
				buildName = ${buildName},
				caseName = ${caseName},
				caseResultName = ${caseResultName},
				componentName = ${componentName},
				runName = ${runName});
		}

		task ("Go to Testray Site") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});
		}
	}

	tearDown {
		task ("Delete task, routine, case type, factor category and project via API, Testray Site and Client Extensions") {
			JSONTestrayAPI.deleteObjectViaAPI(
				object = "tasks",
				objectName = "Task_1");

			JSONTestrayAPI.deleteObjectViaAPI(
				object = "routines",
				objectName = ${routineName});

			JSONTestrayAPI.deleteObjectViaAPI(
				object = "casetypes",
				objectName = ${caseType});

			JSONTestrayAPI.deleteObjectViaAPI(
				object = "factorcategories",
				objectName = "Category 1");

			JSONTestrayAPI.deleteProject(projectName = ${projectName});

			Testray.testrayApisTearDown();
		}

		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Story ID: LPS-162695 | Test Summary: Verify if as an Administrator I should be able to add a task with user groups"
	@priority = 5
	test AdminCanAddTaskWithUserGroups {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given the user add a user and UserGroups") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUserGroup.addUserGroup(
				userGroupDescription = "UG UserGroup Name Description",
				userGroupName = "UG UserGroup Name");

			UserGroup.openUserGroupsAdmin();

			UserGroup.assignAllMembersCP(userGroupName = "UG UserGroup Name");
		}

		task ("When the user add a Task with user groups") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			TestrayTestflow.goToTestflow();

			Click(locator1 = "Button#PLUS");

			TestrayTestflow.editBreadcrumb(
				build = ${buildName},
				project = ${projectName},
				routine = ${routineName});

			Button.click(button = "Analyze");

			Type(
				locator1 = "TestrayManage#NEW_OPTION_NAME",
				value1 = "Task_1");

			Click(
				key_checkboxOption = "Compile",
				locator1 = "Checkbox#ENABLE_CHECKBOX_VIA_SPAN");

			Button.click(button = "Assign User Groups");

			Click.clickAtNotVisible(
				key_checkboxOption = "UG UserGroup Name",
				locator1 = "Checkbox#SPECIFIC_CHECKBOX_IN_TABLE");

			Button.click(button = "Select User Groups");

			Testray.checkSuccessAlertAppearsAndDisappears();
		}

		task ("Then can see a created task with details") {
			TestrayTestflow.assertAssignTask(
				email = "test@liferay.com",
				userName = "Test Test");

			TestrayTestflow.assertAssignTask(
				email = "userea@liferay.com",
				userName = "userfn userln");

			Button.click(button = "Save");

			Alert.viewSuccessMessage();

			TestrayTestflow.goToTestflow();

			TestrayTestflow.assertTaskDetails(
				build = ${buildName},
				project = ${projectName},
				routine = ${routineName},
				status = "In Analysis",
				taskName = "Task_1");
		}
	}

	@description = "Story ID: LPS-170515 | Test Summary: Verify if as an Administrator I should be able to delete a task through the Context Menu"
	@priority = 5
	test AdminCanDeleteTaskContextMenu {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that the user add a Task") {
			TestrayTestflow.goToTestflow();

			TestrayTestflow.addTask(
				checkCaseType = "Compile",
				selectBuild = ${buildName},
				selectProject = ${projectName},
				selectRoutine = ${routineName},
				taskName = "Task_1",
				userName = "Test Test");

			Alert.viewSuccessMessage();

			TestrayTestflow.goToTestflow();

			TestrayTestflow.assertTaskDetails(
				build = ${buildName},
				project = ${projectName},
				routine = ${routineName},
				status = "In Analysis",
				taskName = "Task_1");
		}

		task ("And go to task through build") {
			TestrayLayout.clickResultsOnSidebar();

			Testray.changePagination(quantity = 150);

			Testray.clickTableEntry(tableEntry = ${projectName});

			Testray.clickTableEntry(tableEntry = ${routineName});

			Testray.clickTableEntry(tableEntry = ${buildName});

			Button.click(button = "View Task");

			Button.click(button = "Complete");

			TestrayTestflow.goToTestflow();
		}

		task ("When the user delete the task through the Context Menu") {
			Testray.deleteItem(itemName = "Task_1");
		}

		task ("Then the task is not displayed anymore") {
			Testray.viewTableEntryListNotPresent(listEntry = "Task_1");
		}
	}

	@description = "Story ID: LPS-170515 | Test Summary: Verify if as an Administrator I should be able to edit a task"
	@priority = 4
	test AdminCanEditTask {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that the user add a Task") {
			TestrayTestflow.goToTestflow();

			TestrayTestflow.addTask(
				checkCaseType = "Compile",
				selectBuild = ${buildName},
				selectProject = ${projectName},
				selectRoutine = ${routineName},
				taskName = "Task_1",
				userName = "Test Test");

			Alert.viewSuccessMessage();

			TestrayTestflow.goToTestflow();

			TestrayTestflow.assertTaskDetails(
				build = ${buildName},
				project = ${projectName},
				routine = ${routineName},
				status = "In Analysis",
				taskName = "Task_1");

			TestrayLayout.clickResultsOnSidebar();

			Testray.changePagination(quantity = 150);

			Testray.clickTableEntry(tableEntry = ${projectName});

			Testray.clickTableEntry(tableEntry = ${routineName});

			Testray.clickTableEntry(tableEntry = ${buildName});

			Button.click(button = "View Task");
		}

		task ("When the user edit the task") {
			TestrayTestflow.editTask(
				taskName = "Task_2",
				userName = "Lead User");

			TestrayTestflow.goToTestflow();
		}

		task ("Then the task is edited with new details") {
			Testray.viewTableEntryList(listEntry = "Task_2");
		}
	}

	@description = "Story ID: LPS-165582 | Test Summary: Verify if as an Administrator I should not be able to add a duplicate Task"
	@priority = 5
	test AdminCanNotAddDuplicateTestflow {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("When the user try to add a duplicate Task") {
			TestrayTestflow.goToTestflow();

			TestrayTestflow.addTask(
				checkCaseType = "Compile",
				selectBuild = ${buildName},
				selectProject = ${projectName},
				selectRoutine = ${routineName},
				taskName = "Task_1",
				userName = "Test Test");

			Alert.viewSuccessMessage();

			TestrayTestflow.goToTestflow();

			TestrayTestflow.assertTaskDetails(
				build = ${buildName},
				project = ${projectName},
				routine = ${routineName},
				status = "In Analysis",
				taskName = "Task_1");

			Click(locator1 = "Button#PLUS");

			TestrayTestflow.editBreadcrumb(
				build = ${buildName},
				project = ${projectName},
				routine = ${routineName});

			Button.click(button = "Analyze");
		}

		task ("Then the error message is displayed") {
			Alert.viewErrorMessage(errorMessage = "A task for this build already exists.");
		}
	}

	@description = "Story ID: LPS-170515 | Test Summary: Verify that as an administrator I can reanalyze an abandoned task"
	@priority = 3
	test AdminCanReanalyzeAbandonedTask {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that the user add a Task and subtask via API") {
			JSONTestray.addTask(
				buildName = ${buildName},
				key = "INANALYSIS",
				statusTask = "In Analysis",
				taskName = "Task_1");

			JSONTestray.addSubtask(
				key = "INANALYSIS",
				score = 3,
				statusSubtask = "In Analysis",
				subtaskName = "Subtask_1",
				subtaskNumber = 1,
				taskName = "Task_1");

			TestrayTestflow.goToTestflow();

			TestrayTestflow.assertTaskDetails(
				build = ${buildName},
				project = ${projectName},
				routine = ${routineName},
				status = "In Analysis",
				taskName = "Task_1");

			Testray.clickTableEntry(tableEntry = "Task_1");
		}

		task ("When the user abandon a task") {
			Button.click(button = "Abandon");

			TestrayTestflow.assertStatus(
				label = "Task Details",
				status = "Abandoned");
		}

		task ("And the user reanalyze a task") {
			Button.click(button = "Reanalyze");
		}

		task ("Then the task should appear on the list with the status in analysis") {
			TestrayTestflow.assertStatus(
				label = "Task Details",
				status = "In Analysis");
		}
	}

	@description = "Story ID: LPS-170515 | Test Summary: Verify that as an administrator I can reanalyze an complete task"
	@priority = 3
	test AdminCanReanalyzeCompleteTask {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that the user add a Task") {
			TestrayTestflow.goToTestflow();

			TestrayTestflow.addTask(
				checkCaseType = "Compile",
				selectBuild = ${buildName},
				selectProject = ${projectName},
				selectRoutine = ${routineName},
				taskName = "Task_1",
				userName = "Test Test");

			Alert.viewSuccessMessage();

			TestrayTestflow.goToTestflow();

			TestrayTestflow.assertTaskDetails(
				build = ${buildName},
				project = ${projectName},
				routine = ${routineName},
				status = "In Analysis",
				taskName = "Task_1");

			Testray.clickTableEntry(tableEntry = "Task_1");
		}

		task ("When the user reanalyze an complete task") {
			Button.click(button = "Complete");

			Button.click(button = "Reanalyze");

			TestrayTestflow.assertStatus(
				label = "Task Details",
				status = "Complete");
		}

		task ("Then the task should appear on the list with the status in analysis") {
			TestrayTestflow.assertStatus(
				label = "Task Details",
				status = "In Analysis");
		}
	}

	@description = "Story ID: LPS-170515 | Test Summary: Verify if as an Administrator I should be able to update a task's status to complete"
	@priority = 4
	test AdminCanUpdateTaskStatusToComplete {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that the user add a Task") {
			TestrayTestflow.goToTestflow();

			TestrayTestflow.addTask(
				checkCaseType = "Compile",
				selectBuild = ${buildName},
				selectProject = ${projectName},
				selectRoutine = ${routineName},
				taskName = "Task_1",
				userName = "Test Test");

			Alert.viewSuccessMessage();
		}

		task ("And go to the analyzed task") {
			TestrayLayout.clickResultsOnSidebar();

			Testray.changePagination(quantity = 150);

			Testray.clickTableEntry(tableEntry = ${projectName});

			Testray.clickTableEntry(tableEntry = ${routineName});

			Testray.clickTableEntry(tableEntry = ${buildName});

			Button.click(button = "View Task");
		}

		task ("When the user update task status to complete") {
			Button.click(button = "Complete");
		}

		task ("Then the task should appear on the list with the status complete") {
			TestrayTestflow.assertStatus(
				label = "Task Details",
				status = "Complete");
		}
	}

	@description = "Story ID: LPS-170515 | Test Summary: Verify that as an Administrator I should see the build that is associated with the task"
	@priority = 2
	test AdminCanViewAssociatedBuildInTask {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that the user add a Task") {
			TestrayTestflow.goToTestflow();

			TestrayTestflow.addTask(
				checkCaseType = "Compile",
				selectBuild = ${buildName},
				selectProject = ${projectName},
				selectRoutine = ${routineName},
				taskName = "Task_1",
				userName = "Test Test");

			Alert.viewSuccessMessage();

			TestrayTestflow.goToTestflow();

			TestrayTestflow.assertTaskDetails(
				build = ${buildName},
				project = ${projectName},
				routine = ${routineName},
				status = "In Analysis",
				taskName = "Task_1");
		}

		task ("When the user associates a task with a build") {
			TestrayManage.selectTableRowOption(
				rowOption = "View Associated Build",
				tableEntry = "Task_1");
		}

		task ("Then the user can redirect to the build associated with the task") {
			TestrayDropdown.assertBreadcrumbTitle(text = ${buildName});
		}
	}

	@description = "Story ID: LPS-162695 | Test Summary: Verify that the user cannot create a task without assign users"
	@priority = 4
	test AdminCanViewRequiredAssignUsers {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("When the user try to add a Task without User") {
			TestrayTestflow.goToTestflow();

			TestrayTestflow.addTask(
				checkCaseType = "Compile",
				selectBuild = ${buildName},
				selectProject = ${projectName},
				selectRoutine = ${routineName},
				taskName = "Task_1");
		}

		task ("Then the required User message is displayed") {
			Alert.viewErrorMessage(errorMessage = "Mark at least one user or user group for assignment.");
		}
	}

	@description = "Story ID: LPS-162693 | Test Summary: Verify that the user cannot create a task without Case Type"
	@priority = 2
	test AdminCanViewRequiredCaseType {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("When the user try to add a Task without case type") {
			TestrayTestflow.goToTestflow();

			TestrayTestflow.addTask(
				selectBuild = ${buildName},
				selectProject = ${projectName},
				selectRoutine = ${routineName},
				taskName = "Task_1",
				userName = "Test Test");
		}

		task ("Then the required Case Type message is displayed") {
			Alert.viewErrorMessage(errorMessage = "Mark at least one case type for processing.");
		}
	}

	@description = "Story ID: LPS-162693 | Test Summary: Verify if as an Administrator I should be able view task in analysis"
	@priority = 4
	test AdminCanViewTaskInAnalysis {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given the user add a Task in a different flow") {
			TestrayLayout.clickResultsOnSidebar();

			Testray.changePagination(quantity = 150);

			Testray.clickTableEntry(tableEntry = ${projectName});

			Testray.clickTableEntry(tableEntry = ${routineName});

			Testray.clickTableEntry(tableEntry = ${buildName});

			Button.click(button = "Analyze");

			Type(
				locator1 = "TestrayManage#NEW_OPTION_NAME",
				value1 = "Task_1");

			Click(
				key_checkboxOption = "Compile",
				locator1 = "Checkbox#ENABLE_CHECKBOX_VIA_SPAN");

			Testray.selectUsers(listUserName = "Test Test");

			Testray.checkSuccessAlertAppearsAndDisappears();

			Button.click(button = "Save");

			Alert.viewSuccessMessage();

			TestrayTestflow.goToTestflow();
		}

		task ("Then can see the status of the task In Analysis") {
			TestrayTestflow.assertStatus(
				label = "Tasks",
				status = "In Analysis");
		}
	}

	@description = "Story ID: LPS-162693 | Test Summary: Verify that As an administrator can remove users from the context menu"
	@priority = 3
	test CanRemoveUser {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given the user add a Task") {
			TestrayTestflow.goToTestflow();

			Click(locator1 = "Button#PLUS");

			TestrayTestflow.editBreadcrumb(
				build = ${buildName},
				project = ${projectName},
				routine = ${routineName});

			Button.click(button = "Analyze");

			Type(
				locator1 = "TestrayManage#NEW_OPTION_NAME",
				value1 = "Task_1");

			Click(
				key_checkboxOption = "Compile",
				locator1 = "Checkbox#ENABLE_CHECKBOX_VIA_SPAN");
		}

		task ("When assign a user") {
			Testray.selectUsers(listUserName = "Test Test");

			Testray.checkSuccessAlertAppearsAndDisappears();

			TestrayTestflow.assertAssignTask(
				email = "test@liferay.com",
				userName = "Test Test");
		}

		task ("Then can remove a user") {
			TestrayManage.selectTableRowOption(
				rowOption = "Remove",
				tableEntry = "Test Test");

			Testray.viewTableEntryListNotPresent(listEntry = "Test Test");
		}
	}

	@description = "Story ID: LPS-162693 | Test Summary: Verify that the user can not create a task without name"
	@priority = 2
	test CanViewFieldNameRequired {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("When the user try to add a Task without name") {
			TestrayTestflow.goToTestflow();

			TestrayTestflow.addTask(
				selectBuild = ${buildName},
				selectProject = ${projectName},
				selectRoutine = ${routineName});
		}

		task ("Then the required field message is displayed") {
			Testray.viewErrorMessage(
				fieldLabel = "Name",
				warningMessage = "Name is a required field.");
		}
	}

}
@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	var buildName = "Build 1";
	var caseName = "Case 1";
	var caseType = "Case Type 1";
	var componentName = "Component 1";
	var environmentFactorsName = "Environment Factors 1";
	var productVersion = "1.2";
	var projectName = "Project 1";
	var routineName = "Routine 1";
	var teamName = "Team 1";
	var testSiteName = "Testray 2";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Testray Site") {
			HeadlessSite.addSite(
				siteName = ${testSiteName},
				templateName = "Testray",
				templateType = "Site Initializer");
		}

		task ("Create project, team, component, routine, case type, case, environment factor, product version and build via API") {
			JSONTestray.addProject(
				projectDescription = "Project Description 1",
				projectName = ${projectName});

			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addComponent(
				componentName = ${componentName},
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addRoutine(
				projectName = ${projectName},
				routineName = ${routineName});

			JSONTestray.addCaseType(caseType = ${caseType});

			JSONTestray.addCases(
				caseName = ${caseName},
				caseType = ${caseType},
				componentName = ${componentName},
				projectName = ${projectName});

			JSONTestray.addEnvironmentFactors(environmentFactorsName = ${environmentFactorsName});

			JSONTestray.addProductVersion(
				productVersion = ${productVersion},
				projectName = ${projectName});

			JSONTestray.addBuild(
				buildName = ${buildName},
				productVersion = ${productVersion},
				projectName = ${projectName},
				routineName = ${routineName});
		}
	}

	tearDown {
		task ("Logout And Login with test user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "test test");
		}

		task ("Delete case type, factor categorie and project via API, Testray Site and Client Extensions") {
			JSONTestrayAPI.deleteObjectViaAPI(
				object = "casetypes",
				objectName = ${caseType});

			JSONTestrayAPI.deleteObjectViaAPI(
				object = "factorcategories",
				objectName = "Category 1");

			JSONTestrayAPI.deleteProject(projectName = ${projectName});

			Testray.testrayApisTearDown();
		}

		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Story ID: LPS-178254 | Test Summary: Verify that the User with the 'Testray Analyst' role should not be able to create the build"
	@priority = 3
	test AssertAnalystRoleCanNotCreateBuild {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that the user login with the Testray Analyst role") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "analyst@testray.com",
				userLoginFullName = "Analyst User");

			Navigator.openSiteURL(siteName = "Testray 2");

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			Testray.goToProjectPage(projectName = ${projectName});
		}

		task ("When the user go to the build page") {
			TestrayRoutines.goToRoutine(routineName = ${routineName});
		}

		task ("Then the user can not create build") {
			AssertElementNotPresent(locator1 = "Button#PLUS");
		}
	}

	@description = "Story ID: LPS-178254 | Test Summary: Verify that the User with the 'Testray Analyst' role should not be able to delete the build"
	@priority = 3
	test AssertAnalystRoleCanNotDeleteBuild {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that the user login with the Testray Analyst role") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "analyst@testray.com",
				userLoginFullName = "Analyst User");

			Navigator.openSiteURL(siteName = "Testray 2");

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			Testray.goToProjectPage(projectName = ${projectName});

			TestrayRoutines.goToRoutine(routineName = ${routineName});
		}

		task ("When The user right click in build") {
			RightClick.rightClick(
				key_projectName = ${buildName},
				locator1 = "Testray#ITEM_NAME");
		}

		task ("Then the user can not delete the build") {
			AssertElementNotPresent(
				item = "Delete",
				locator1 = "TestrayContextMenu#CONTEXT_MENU_PROJECTS_ITEMS");
		}
	}

	@description = "Story ID: LPS-178254 | Test Summary: Verify that the User with the 'Testray Analyst' role should not be able to edit the build"
	@priority = 3
	test AssertAnalystRoleCanNotEditBuild {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that the user login with the Testray Analyst role") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "analyst@testray.com",
				userLoginFullName = "Analyst User");

			Navigator.openSiteURL(siteName = "Testray 2");

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			Testray.goToProjectPage(projectName = ${projectName});

			TestrayRoutines.goToRoutine(routineName = ${routineName});
		}

		task ("When the user right click in build") {
			RightClick.rightClick(
				key_projectName = ${buildName},
				locator1 = "Testray#ITEM_NAME");
		}

		task ("Then the user can not edit the build") {
			AssertElementNotPresent(
				item = "Edit",
				locator1 = "TestrayContextMenu#CONTEXT_MENU_PROJECTS_ITEMS");
		}
	}

	@description = "Story ID: LPS-178254 | Test Summary: Verify that the User with the 'Testray Lead' role should be able to create the build"
	@priority = 4
	test AssertLeadRoleCanCreateBuild {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that the user login with the Testray Lead role") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "lead@testray.com",
				userLoginFullName = "Lead User");

			Navigator.openSiteURL(siteName = "Testray 2");

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			Testray.goToProjectPage(projectName = ${projectName});

			TestrayRoutines.goToRoutine(routineName = ${routineName});
		}

		task ("When the user create a build") {
			TestrayBuild.addBuildViaUI(
				buildFieldName = "Build 2",
				caseName = ${caseName},
				dropdownItem = "New Build",
				productVersionOption = "1.2",
				routine = ${routineName});
		}

		task ("Then the user can see the build in the list") {
			AssertElementPresent(
				key_projectName = "Build 2",
				locator1 = "Testray#ITEM_NAME");
		}
	}

	@description = "Story ID: LPS-178254 | Test Summary: Verify that the User with the 'Testray Lead' role should be able to delete the build"
	@priority = 4
	test AssertLeadRoleCanDeleteBuild {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that the user login with the Testray Lead role") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "lead@testray.com",
				userLoginFullName = "Lead User");

			Navigator.openSiteURL(siteName = "Testray 2");

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			Testray.goToProjectPage(projectName = ${projectName});

			TestrayRoutines.goToRoutine(routineName = ${routineName});
		}

		task ("When the user delete a build") {
			TestrayContextMenu.clickContextMenuProjects(name = ${buildName});

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Delete");

			AssertConfirm(value1 = "Are you sure you want to delete this item?");
		}

		task ("Then the build should not appear on the list") {
			AssertElementNotPresent(
				key_projectName = ${buildName},
				locator1 = "Testray#ITEM_NAME");
		}
	}

	@description = "Story ID: LPS-178254 | Test Summary: Verify that the User with the 'Testray Lead' role should be able to edit the build"
	@priority = 4
	test AssertLeadRoleCanEditBuild {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that the user login with the Testray Lead role") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "lead@testray.com",
				userLoginFullName = "Lead User");

			Navigator.openSiteURL(siteName = "Testray 2");

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			Testray.goToProjectPage(projectName = ${projectName});

			TestrayRoutines.goToRoutine(routineName = ${routineName});
		}

		task ("When the user edit a build") {
			TestrayContextMenu.clickContextMenuProjects(name = ${buildName});

			TestrayContextMenu.selectItemFromProjectsContextMenu(item = "Edit");

			TestrayBuild.editBuild(
				description = "Description Edited",
				fieldName = "Build Edited",
				gitHash = 12345,
				productVersion = "1.2",
				routine = ${routineName});
		}

		task ("Then the user can see the build edited in the list") {
			AssertElementPresent(
				key_projectName = "Build Edited",
				locator1 = "Testray#ITEM_NAME");
		}
	}

	@description = "Story ID: LPS-178254 | Test Summary: Verify that the User with the 'Testray User' role should not be able to create the build"
	@priority = 3
	test AssertUserRoleCanNotCreateBuild {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that the user login with the Testray Lead role") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "user@testray.com",
				userLoginFullName = "User User");

			Navigator.openSiteURL(siteName = "Testray 2");

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			Testray.goToProjectPage(projectName = ${projectName});
		}

		task ("When the user go to the build page") {
			TestrayRoutines.goToRoutine(routineName = ${routineName});
		}

		task ("Then the user can not create build") {
			AssertElementNotPresent(locator1 = "Button#PLUS");
		}
	}

	@description = "Story ID: LPS-178254 | Test Summary: Verify that the User with the 'Testray User' role should not be able to delete the build"
	@priority = 3
	test AssertUserRoleCanNotDeleteBuild {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that the user login with the Testray User role") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "user@testray.com",
				userLoginFullName = "User User");

			Navigator.openSiteURL(siteName = "Testray 2");

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			Testray.goToProjectPage(projectName = ${projectName});

			TestrayRoutines.goToRoutine(routineName = ${routineName});
		}

		task ("When The user right click in build") {
			RightClick.rightClick(
				key_projectName = ${buildName},
				locator1 = "Testray#ITEM_NAME");
		}

		task ("Then the user can not delete the build") {
			AssertElementNotPresent(
				item = "Delete",
				locator1 = "TestrayContextMenu#CONTEXT_MENU_PROJECTS_ITEMS");
		}
	}

	@description = "Story ID: LPS-178254 | Test Summary: Verify that the User with the 'Testray User' role should not be able to edit the build"
	@priority = 3
	test AssertUserRoleCanNotEditBuild {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that the user login with the Testray User role") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "user@testray.com",
				userLoginFullName = "User User");

			Navigator.openSiteURL(siteName = "Testray 2");

			Testray.changePagination(
				numberItems = 20,
				valuePagination = 150);

			Testray.goToProjectPage(projectName = ${projectName});

			TestrayRoutines.goToRoutine(routineName = ${routineName});
		}

		task ("When the user right click in build") {
			RightClick.rightClick(
				key_projectName = ${buildName},
				locator1 = "Testray#ITEM_NAME");
		}

		task ("Then the user can not edit the build") {
			AssertElementNotPresent(
				item = "Edit",
				locator1 = "TestrayContextMenu#CONTEXT_MENU_PROJECTS_ITEMS");
		}
	}

}
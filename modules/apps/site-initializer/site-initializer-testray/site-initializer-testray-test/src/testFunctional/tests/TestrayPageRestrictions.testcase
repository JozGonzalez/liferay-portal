@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	var caseName = "Case 1";
	var caseType = "Case Type 1";
	var componentName = "Component 1";
	var projectName = "Project 1";
	var suiteName = "Suite 1";
	var teamName = "Team 1";
	var testSiteName = "Testray 2";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Testray Site") {
			HeadlessSite.addSite(
				siteName = ${testSiteName},
				templateName = "Testray",
				templateType = "Site Initializer");
		}

		task ("Create Project, team, component, case type, case and suite via API") {
			JSONTestray.addProject(
				projectDescription = "Project Description 1",
				projectName = ${projectName});

			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addComponent(
				componentName = ${componentName},
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addCaseType(caseType = ${caseType});

			JSONTestray.addCases(
				caseName = ${caseName},
				caseType = ${caseType},
				componentName = ${componentName},
				projectName = ${projectName});

			JSONTestray.addSuite(suiteName = ${suiteName});
		}
	}

	tearDown {
		task ("Logout And Login with test user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "test test");
		}

		task ("Delete project via API, Testray Site and Client Extensions") {
			JSONTestrayAPI.deleteProject(projectName = ${projectName});

			Testray.testrayApisTearDown();
		}

		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Story ID: LPS-182898 | Test Summary: Verify that role Testray Analyst can see page restriction when tries to access the page of the add suite via the URL"
	@priority = 4
	test AssertAnalystSeePageRestrictionWhenAccessViaUrlOnSuite {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that the user login with the Testray Analyst role") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "analyst@testray.com",
				userLoginFullName = "Analyst User");

			Navigator.openSiteURL(siteName = "Testray 2");
		}

		task ("When the user go to page restriction via URL") {
			var portalURL = PropsUtil.get("portal.url");

			Navigator.openSpecificURL(url = "${portalURL}/web/testray-2#/${projectName}/suites/create");
		}

		task ("Then the user can see page restriction") {
			AssertElementPresent(
				key_title = "Sorry, this page does not exist",
				locator1 = "Header#H1_TITLE");
		}
	}

	@description = "Story ID: LPS-182898 | Test Summary: Verify that can return to the home page when access the page is restricted in project"
	@priority = 3
	test AssertCanReturnHomePageWhenAccessPageRestrictionOnRoutine {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that the user login with the Testray User role") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "user@testray.com",
				userLoginFullName = "User User");

			Navigator.openSiteURL(siteName = "Testray 2");
		}

		task ("And the user go to page restriction via URL") {
			var portalURL = PropsUtil.get("portal.url");

			Navigator.openSpecificURL(url = "${portalURL}/web/testray-2#/${projectName}/routines/create");
		}

		task ("When the user click in the link to the home page") {
			Testray.goToLink(text = "Go to homepage");
		}

		task ("Then the user can return to the home page") {
			TestrayLayout.assertTabPageTitle(pageTabTitle = "Projects");
		}
	}

	@description = "Story ID: LPS-182898 | Test Summary: Verify that role Testray Lead can see page restriction when tries to access the page of the add project via the URL"
	@priority = 4
	test AssertLeadSeePageRestrictionWhenAccessViaUrlOnProject {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that the user login with the Testray Lead role") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "lead@testray.com",
				userLoginFullName = "Lead User");

			Navigator.openSiteURL(siteName = "Testray 2");
		}

		task ("When the user go to page restriction via URL") {
			var portalURL = PropsUtil.get("portal.url");

			Navigator.openSpecificURL(url = "${portalURL}/web/testray-2#/project/create");
		}

		task ("Then the user can see page restriction") {
			AssertElementPresent(
				key_title = "Sorry, this page does not exist",
				locator1 = "Header#H1_TITLE");
		}
	}

	@description = "Story ID: LPS-182898 | Test Summary: Verify that role Testray User can see page restriction when tries to access the page of the add case via the URL"
	@priority = 4
	test AssertUserRoleSeePageRestrictionWhenAccessViaUrlOnCase {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that the user login with the Testray User role") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "user@testray.com",
				userLoginFullName = "User User");

			Navigator.openSiteURL(siteName = "Testray 2");
		}

		task ("When the user go to page restriction via URL") {
			var portalURL = PropsUtil.get("portal.url");

			Navigator.openSpecificURL(url = "${portalURL}/web/testray-2#/${projectName}/cases/create");
		}

		task ("Then the user can see page restriction") {
			AssertElementPresent(
				key_title = "Sorry, this page does not exist",
				locator1 = "Header#H1_TITLE");
		}
	}

}
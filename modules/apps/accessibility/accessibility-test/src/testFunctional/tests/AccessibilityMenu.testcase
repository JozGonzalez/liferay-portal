@component-name = "portal-platform-experience-and-design-system"
definition {

	property osgi.modules.includes = "accessibility-menu-web";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Accessibility Menu";
	property testray.main.component.name = "Accessibility Menu";

	setUp {
		TestCase.setUpPortalInstance();

		TestUtils.hardRefresh();

		User.firstLoginPG();

		task ("Given Accessibility Menu enabled at Instance Settings level") {
			AccessibilityMenu.activateAccessibilityMenu();
		}

		task ("And navigate to home page") {
			Navigator.openURL();
		}
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();

			TestUtils.hardRefresh();
		}
		else {
			TestUtils.hardRefresh();
		}
	}

	@description = "LPS-178192. Verifies only if the setting has never been changed by the user, either when signed in or not signed in, will the default value be displayed.."
	@priority = 5
	test BrowserLocalStorageSmoke {
		property portal.acceptance = "true";

		task ("Given created new user A") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfnA",
				userLastName = "userlnA",
				userScreenName = "usersnA");
		}
		task("And signed out as guest user"){
			SignOut.signOut();
		}
		task("When toggle  show underline to OFF state"){
			AccessibilityMenu.openAccessibilityMenu();

			AssertNotChecked.assertNotCheckedNotVisible(
				key_toggleSwitchLabel = "Underlined Links",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
		}

		task("And sign in as a new user for first time"){
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfnA userlnA");
		}
		task("And toggle show under to ON"){
			AccessibilityMenu.openAccessibilityMenu();

			Check.checkToggleSwitch(
				key_toggleSwitchLabel = "Underlined Links",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
		}
		task("And user signs out"){
			SignOut.signOut();
		}
		task("Then show underline is set to OFF"){
			AccessibilityMenu.openAccessibilityMenu();

			AssertNotChecked.assertNotCheckedNotVisible(
				key_toggleSwitchLabel = "Underlined Links",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		}
		task("And When guest user toggles show underline to ON"){
			Navigator.openURL();

			AccessibilityMenu.openAccessibilityMenu();

			Check.checkToggleSwitch(
				key_toggleSwitchLabel = "Underlined Links",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		}

		task("And sign in as user A"){
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfnA userlnA");

		}
		task("Then show underline is set to ON state"){
			AccessibilityMenu.openAccessibilityMenu();
			AssertChecked.assertCheckedNotVisible(
				key_toggleSwitchLabel = "Underlined Links",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		}

	}

	@description = "LPS-178192. Verifies the modified accessibility configuration state is persisted in database for signed in user."
	@ignore = "Test Stub"
	@priority = 5
	test ChangedConfigurationSettingByAuthenticatedUserWillBeSavedInDatabase {
		property portal.acceptance = "true";

		//task ("Given When Then") {

		// // Given created new user A
		// // When sign in as user A
		// // And toggle show underline to OFF state)
		// // And sign out
		// // And guest user sets shows underline configuration to OFF
		// // And guest user sets shows underline configuration to ON
		// // And when sign in as user A
		// // When open Accessibility Menu
		// // Then show underline is set to OFF

		//}

	}

	@description = "LPS-178192. Verifies accessibility menu modal toggle switches are keyboard accessible."
	@ignore = "Test Stub"
	@priority = 3
	test ConfigurationCanBeToggledWithKeyboard {

		//task ("Given When Then") {

		// // Given Accessibility Menu
		// // And show underline configuration is at ON state
		// // When focus on a configuration toggle with keyboard
		// // And toggle a configuration with "Enter" key
		// // Then configuration is toggled to OFF state
		// // And When toggle configuration with "Enter" key
		// // Then configuration is toggled to ON state

		//}

	}

	@description = "LPS-178192. Verifies focus remains on current configuration toggle after toggling."
	@ignore = "Test Stub"
	@priority = 3
	test FocusWillRemainOnCurrentToggleSetting {

		//task ("Given When Then") {

		// // Given Accessibility Menu
		// // When toggle a configuration with "Enter" key
		// // Then focus stays on the current configuration toggle

		//}

	}

	@description = "LPS-178192. Verifies guest configured settings can persist in browser local storage."
	@ignore = "Test Stub"
	@priority = 4
	test GuestConfigurationCanPersistInBrowserLocalStorage {
		property portal.acceptance = "true";

		//task ("Given When Then") {

		// // Given guest user
		// // When toggle underline to OFF state
		// // And open a new browser tab
		// // And open accessibility menu
		// // Then menu option is set to OFF state

		//}

	}

	@description = "LPS-178192. Verifies OFF state can persist to first login user."
	@ignore = "Test Stub"
	@priority = 3
	test GuestConfigurationOffStateWillPersistForFirstLogin {

		//task ("Given When Then") {

		// // Given create a new user
		// // And as a guest user
		// // // sign out of admin role to become a guest user role
		// // And toggle show underline to OFF state
		// // //click show underline to OFF state
		// // When sign in as a new user for first time
		// // Then configuration is persisted to first time signed in user
		// // // assert body element does not have "c-prefers-link-underline" class present
		// // //open accessibility menu
		// // // assert configuration is OFF state
		// // Note: may need to remove any underline html attributes. see https://www.w3schools.com/howto/howto_js_remove_class.asp

		//}

	}

	@description = "LPS-178192. Verifies ON state can persist to first login user."
	@ignore = "Test Stub"
	@priority = 3
	test GuestConfigurationOnStateWillPersistForFirstLogin {

		//task ("Given When Then") {

		// // Given create a new user
		// // And as a guest user
		// // // sign out of admin role to become a guest user role
		// // And toggle show underline to ON state
		// // //click show underline to ON state
		// // When sign in as a new user for first time
		// // Then configuration is persisted to first time signed in user
		// // // assert body element has "c-prefers-link-underline" class present
		// // //open accessibility menu
		// // // assert configuration is ON state
		// // Note: may need to remove any underline html attributes. see https://www.w3schools.com/howto/howto_js_remove_class.asp

		//}

	}

	@description = "LPS-178192. Verifies accessibility menu quick link is keyboard focusable."
	@priority = 5
	test LinkIsKeyboardFocusable {
		property portal.acceptance = "true";

		task ("When press tab key from 'Skip to Content' link") {
			AccessibilityMenu.goToAccessibilityMenuQuickLink();
		}

		task ("Then Accessibility Menu link is focusable") {
			AssertElementFocused(
				key_link = "Open Accessibility Menu",
				locator1 = "AccessibilityMenu#QUICK_LINK");
		}
	}

	@description = "LPS-178192. Verifies accessibility menu modal can be accessed by keyboard."
	@priority = 5
	test ModalIsKeyboardAccessible {
		property portal.acceptance = "true";

		task ("When Accessibility Menu is focused with keyboard") {
			AccessibilityMenu.goToAccessibilityMenuQuickLink();
		}

		task ("And access Accessibility Menu link with 'Enter' key") {
			KeyPress(
				key_link = "Accessibility Menu",
				locator1 = "AccessibilityMenu#QUICK_LINK",
				value1 = "\ENTER");
		}

		task ("Then Accessibility Menu modal is present") {
			AssertElementPresent(
				key_modal_title = "Accessibility Help Menu",
				locator1 = "AccessibilityMenu#MODAL_TITLE");
		}

		task ("And can navigate to a switch toggle with keyboard") {
			KeyPress(
				locator1 = "//body",
				value1 = "\TAB");

			KeyPress(
				key_modalTitle = "Accessibility Help Menu",
				locator1 = "Button#CLOSE_MODAL",
				value1 = "\TAB");

			AssertElementFocused(
				checkboxName = "Underlined Links",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}
	}

	@description = "LPS-178192. Verifies show underline effects configuration can apply an underline class to link elements in body of page."
	@ignore = "Test Stub"
	@priority = 5
	test ShowUnderlineEffectsCanApplyUnderlineClassToLinksImmediately {
		property portal.acceptance = "true";

		//task ("Given When Then") {

		// // Given home page
		// // And underline class not applied to body element
		// // // verify show underline config in accessibility menu is off
		// // // verify body element does not have "c-prefers-link-underline" class present
		// // When access Accessibility Menu
		// // And toggle ON show underline effect in links
		// // Then body element has underline class applied
		// // // assert body element has "c-prefers-link-underline" class present

		//}

	}

	@description = "LPS-178192. Verifies show underline effects in links toggle is enabled by default."
	@ignore = "Test Stub"
	@priority = 3
	test ShowUnderlineEffectsIsDisabledByDefault {

		//task ("Given When Then") {

		// // Given home page
		// // When access accessibility menu
		// // Then show underline effects in links is toggled OFF state
		// // assert body element does not have "c-prefers-link-underline" class

		//}

	}

	@description = "LPS-178192. Verifies only if the setting has never been changed by the user, either when signed in or not signed in, will the default value be displayed.."
	@priority = 5
	test UntoggledSettingsAreAppliedImmediately {
		property portal.acceptance = "true";

		// Given home page
		// And underline class is applied to Powered by Liferay
		// // verify show underline config in accessibility menu is on
		// // verify link element "Powered by Liferay" does have "c-prefers-link-underline" class present
		// When access Accessibility Menu
		// And toggle OFF show underline effect in links 
		// Then Powered by Liferay link does not have underline class applied
		// // assert link element "Powered by Liferay" does not have "c-prefers-link-underline" class present

}
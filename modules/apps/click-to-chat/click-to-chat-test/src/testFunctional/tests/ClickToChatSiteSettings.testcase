@component-name = "portal-solutions"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Click to Chat";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Instance Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Click to Chat",
			configurationName = "Click to Chat Configuration",
			configurationScope = "Virtual Instance Scope");

		FormFields.enableCheckbox(fieldName = "enabled");
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			User.logoutPG();
		}
	}

	@description = "This is a test for LPS-132716. Verify if the data persists in Site Settings after choosing the strategy 'Always Inherit' in Instance Settings"
	@priority = 5
	test CheckStrategyAlwaysInheritPersistence {
		property solutions.acceptance = "true";
		
		task ("Given the user set 'Always Inherit' configuration") {
			ClickToChatUtils.fillGoalsChat(
				chatProviderId = "Zendesk Web Widget Classic",
				siteSettingsStrategy = "Always Inherit");

			var passwordZendesk = ClickToChatUtils.getPassword(chatProviderChoosen = "zendesk");
		}

		task ("And can see the Zendesk Web Widget Classic icon") {
			AssertElementPresent(locator1 = "Providers#CHAT_ZENDESK");
		}

		task ("When the user navigate to Click to Chat") {
			ClickToChatUtils.navigateToComponent(nameComponent = "Click to Chat");
		}

		task ("Then the user can see that the data is present after choosing the strategy 'Always Inherit' in Instance Settings") {
			ClickToChatUtils.viewTheFieldsPresent(
				siteSettingsStrategy ="Always Inherit",
				chatProviderOption = "Zendesk Web Widget Classic",
				chatProviderId = ${passwordZendesk});
		}
	}

	@description = "This is a test for LPS-132716. Verify if the data persists in Site Settings after choosing the strategy 'Always Override' in Instance Settings"
	@priority = 5
	test CheckStrategyAlwaysOverridePersistence {
		property solutions.acceptance = "true";

		Select(
			locator1 = "ClickToChatConfiguration#SITE_SETTINGS_STRATEGY",
			value1 = "Always Override");

		SystemSettings.saveConfiguration();

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Configuration",
			portlet = "Site Settings");

		Click(
			key_itemName = "Click to Chat",
			locator1 = "ListGroupItem#ITEM_TEXT");

		FormFields.enableCheckbox(fieldName = "enabled");

		Select(
			locator1 = "ClickToChatConfiguration#CHAT_PROVIDER_ID",
			value1 = "Zendesk");

		var clickToChatZendeskPassword = PropsUtil.get("click.to.chat.zendesk.password");

		Type(
			locator1 = "ClickToChatConfiguration#CHAT_PROVIDER_ACCOUNT_ID",
			value1 = ${clickToChatZendeskPassword});

		SystemSettings.saveConfiguration();

		Refresh();

		AssertElementPresent(locator1 = "Providers#CHAT_ZENDESK");

		var siteSettingsStrategy = "Always Override";
		var chatProvider = "zendesk";
		var chatProviderId = ${clickToChatZendeskPassword};

		AssertElementPresent(
			locator1 = "ClickToChatConfiguration#SITE_SETTINGS_STRATEGY_CHOOSEN",
			siteSettingsStrategy = ${siteSettingsStrategy});

		AssertElementPresent(locator1 = "ClickToChatConfiguration#CHECK_INPUT_ENABLED");

		AssertElementPresent(
			chatProvider = ${chatProvider},
			locator1 = "ClickToChatConfiguration#SITE_SETTINGS_STRATEGY_CHOOSEN");

		AssertElementPresent(
			chatProviderId = ${chatProviderId},
			locator1 = "ClickToChatConfiguration#CHECK_CHAT_PROVIDER_ID");
	}

	@description = "This is a test for LPS-132716. Verify if the data persists in Site Settings after choosing the strategy 'Inherit or Override' in Instance Settings"
	@priority = 5
	test CheckStrategyInheritOrOverridePersistence {
		property solutions.acceptance = "true";

		Select(
			locator1 = "ClickToChatConfiguration#SITE_SETTINGS_STRATEGY",
			value1 = "Inherit or Override");

		Select(
			locator1 = "ClickToChatConfiguration#CHAT_PROVIDER_ID",
			value1 = "Zendesk");

		var clickToChatZendeskPassword = PropsUtil.get("click.to.chat.zendesk.password");

		Type(
			locator1 = "ClickToChatConfiguration#CHAT_PROVIDER_ACCOUNT_ID",
			value1 = ${clickToChatZendeskPassword});

		SystemSettings.saveConfiguration();

		Refresh();

		AssertElementPresent(locator1 = "Providers#CHAT_ZENDESK");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Configuration",
			portlet = "Site Settings");

		Click(
			key_itemName = "Click to Chat",
			locator1 = "ListGroupItem#ITEM_TEXT");

		var siteSettingsStrategy = "Inherit or Override";
		var chatProvider = "zendesk";
		var chatProviderId = ${clickToChatZendeskPassword};

		AssertElementPresent(
			locator1 = "ClickToChatConfiguration#SITE_SETTINGS_STRATEGY_CHOOSEN",
			siteSettingsStrategy = ${siteSettingsStrategy});

		AssertElementPresent(locator1 = "ClickToChatConfiguration#CHECK_INPUT_ENABLED");

		AssertElementPresent(
			chatProvider = ${chatProvider},
			locator1 = "ClickToChatConfiguration#SITE_SETTINGS_STRATEGY_CHOOSEN");

		AssertElementPresent(
			chatProviderId = ${chatProviderId},
			locator1 = "ClickToChatConfiguration#CHECK_CHAT_PROVIDER_ID");
	}

}
/**
 * SPDX-FileCopyrightText: (c) 2000 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.liferay.journal.web.internal.model.listener.test;

import com.liferay.arquillian.extension.junit.bridge.junit.Arquillian;
import com.liferay.data.engine.rest.dto.v2_0.DataDefinition;
import com.liferay.data.engine.rest.resource.v2_0.DataDefinitionResource;
import com.liferay.data.engine.rest.test.util.DataDefinitionTestUtil;
import com.liferay.dynamic.data.mapping.model.DDMStructure;
import com.liferay.dynamic.data.mapping.service.DDMStructureLocalService;
import com.liferay.journal.model.JournalArticle;
import com.liferay.portal.configuration.test.util.ConfigurationTemporarySwapper;
import com.liferay.portal.kernel.exception.ModelListenerException;
import com.liferay.portal.kernel.model.Company;
import com.liferay.portal.kernel.model.Group;
import com.liferay.portal.kernel.service.CompanyLocalService;
import com.liferay.portal.kernel.test.rule.AggregateTestRule;
import com.liferay.portal.kernel.test.rule.DeleteAfterTestRun;
import com.liferay.portal.kernel.test.util.GroupTestUtil;
import com.liferay.portal.kernel.test.util.ServiceContextTestUtil;
import com.liferay.portal.kernel.test.util.TestPropsValues;
import com.liferay.portal.kernel.util.HashMapDictionaryBuilder;
import com.liferay.portal.kernel.util.Portal;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.test.rule.FeatureFlags;
import com.liferay.portal.test.rule.Inject;
import com.liferay.portal.test.rule.LiferayIntegrationTestRule;

import org.junit.Assert;
import org.junit.Before;
import org.junit.ClassRule;
import org.junit.Rule;
import org.junit.Test;
import org.junit.runner.RunWith;

/**
 * @author Lourdes Fern√°ndez Besada
 */
@FeatureFlags("LPS-184255")
@RunWith(Arquillian.class)
public class DDMStructureModelListenerTest {

	@ClassRule
	@Rule
	public static final AggregateTestRule aggregateTestRule =
		new LiferayIntegrationTestRule();

	@Before
	public void setUp() throws Exception {
		_group = GroupTestUtil.addGroup();
	}

	@Test(expected = ModelListenerException.class)
	public void testUpdateBasicWebContentStructureKeyAutogenerateDDMStructureKeyDisabled()
		throws Exception {

		try (ConfigurationTemporarySwapper configurationTemporarySwapper =
				new ConfigurationTemporarySwapper(
					"com.liferay.journal.web.internal.configuration." +
						"JournalWebConfiguration",
					HashMapDictionaryBuilder.<String, Object>put(
						"autogenerateDDMStructureKey", false
					).build())) {

			Company company = _companyLocalService.getCompany(
				_group.getCompanyId());

			DDMStructure ddmStructure = _ddmStructureLocalService.getStructure(
				company.getGroupId(),
				_portal.getClassNameId(JournalArticle.class.getName()),
				"BASIC-WEB-CONTENT");

			_ddmStructureLocalService.updateStructure(
				TestPropsValues.getUserId(), ddmStructure.getStructureId(),
				ddmStructure.getParentStructureId(),
				"BASIC-WEB-CONTENT-MODIFIED", ddmStructure.getNameMap(),
				ddmStructure.getDescriptionMap(), ddmStructure.getDefinition(),
				ServiceContextTestUtil.getServiceContext(_group.getGroupId()));
		}
	}

	@Test
	public void testUpdateStructureKeyAutogenerateDDMStructureKeyDisabled()
		throws Exception {

		try (ConfigurationTemporarySwapper configurationTemporarySwapper =
				new ConfigurationTemporarySwapper(
					"com.liferay.journal.web.internal.configuration." +
						"JournalWebConfiguration",
					HashMapDictionaryBuilder.<String, Object>put(
						"autogenerateDDMStructureKey", false
					).build())) {

			DataDefinitionResource.Builder dataDefinitionResourcedBuilder =
				_dataDefinitionResourceFactory.create();

			DataDefinitionResource dataDefinitionResource =
				dataDefinitionResourcedBuilder.user(
					TestPropsValues.getUser()
				).build();

			DataDefinition dataDefinition = _addDataDefinition();

			String modifiedDataDefinitionKey =
				dataDefinition.getDataDefinitionKey() + "-MODIFIED";

			dataDefinition.setDataDefinitionKey(modifiedDataDefinitionKey);

			dataDefinition = dataDefinitionResource.putDataDefinition(
				dataDefinition.getId(), dataDefinition);

			Assert.assertEquals(
				modifiedDataDefinitionKey,
				dataDefinition.getDataDefinitionKey());
		}
	}

	@Test(expected = ModelListenerException.class)
	public void testUpdateStructureKeyAutogenerateDDMStructureKeyEnabled()
		throws Exception {

		try (ConfigurationTemporarySwapper configurationTemporarySwapper =
				new ConfigurationTemporarySwapper(
					"com.liferay.journal.web.internal.configuration." +
						"JournalWebConfiguration",
					HashMapDictionaryBuilder.<String, Object>put(
						"autogenerateDDMStructureKey", true
					).build())) {

			DataDefinitionResource.Builder dataDefinitionResourcedBuilder =
				_dataDefinitionResourceFactory.create();

			DataDefinitionResource dataDefinitionResource =
				dataDefinitionResourcedBuilder.user(
					TestPropsValues.getUser()
				).build();

			DataDefinition dataDefinition = _addDataDefinition();

			String modifiedDataDefinitionKey =
				dataDefinition.getDataDefinitionKey() + "-MODIFIED";

			dataDefinition.setDataDefinitionKey(modifiedDataDefinitionKey);

			dataDefinitionResource.putDataDefinition(
				dataDefinition.getId(), dataDefinition);
		}
	}

	private DataDefinition _addDataDefinition() throws Exception {
		Class<?> clazz = getClass();

		String json = StringUtil.read(
			clazz.getResourceAsStream("dependencies/data_definition.json"));

		return DataDefinitionTestUtil.addDataDefinition(
			"journal", _dataDefinitionResourceFactory, _group.getGroupId(),
			json, TestPropsValues.getUser());
	}

	@Inject
	private CompanyLocalService _companyLocalService;

	@Inject
	private DataDefinitionResource.Factory _dataDefinitionResourceFactory;

	@Inject
	private DDMStructureLocalService _ddmStructureLocalService;

	@DeleteAfterTestRun
	private Group _group;

	@Inject
	private Portal _portal;

}
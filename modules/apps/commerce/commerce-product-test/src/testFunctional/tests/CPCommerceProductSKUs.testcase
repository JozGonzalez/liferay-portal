@component-name = "portal-commerce"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Product Info Management";

	setUp {
		CommerceConfiguration.commerceSetUp(storeFront = "true");
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "This is a test for COMMERCE-6021. AddASKU"
	@priority = 3
	test AddASKU {
		property portal.acceptance = "false";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Minium",
			productName = "Simple T-Shirt",
			productType = "Simple");

		CommerceEntry.gotoMenuTab(menuTab = "SKUs");

		Click(locator1 = "Button#PLUS");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Type(
			locator1 = "CommerceEntry#SKU_FIELD",
			value1 = "BLACKSKU");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Purchasable",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		CommerceSKUs.addPriceToSKU(price = "10.0");

		Button.clickPublish();

		AssertVisible(locator1 = "Message#SUCCESS");
	}

	@description = "This is a test for COMMERCE-6024. AddASKUWithSubscriptions"
	@priority = 3
	test AddASKUWithSubscriptions {
		property portal.acceptance = "false";

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Simple T-Shirt",
			productType = "Simple");

		CommerceEntry.gotoMenuTab(menuTab = "SKUs");

		CommerceSKUs.addSKU(
			noOption = "true",
			optionValuesList = "BLACK:10.0");

		Click(
			key_value = "BLACKSKU",
			locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS");

		MenuItem.click(menuItem = "Edit");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Click(
			key_entry = "Subscriptions",
			locator1 = "CommerceNavigation#ANY_ENTRY_NAME");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Override Subscription Settings",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		AssertElementPresent.assertVisible(
			key_entryName = "Payment Subscription",
			locator1 = "CommerceEntry#ENTRY_SUBSCRIPTIONS");

		AssertElementPresent.assertVisible(
			key_entryName = "Delivery Subscription",
			locator1 = "CommerceEntry#ENTRY_SUBSCRIPTIONS");

		Button.clickSave();

		AssertVisible(locator1 = "Message#SUCCESS");

		Uncheck.uncheckToggleSwitch(
			key_toggleSwitchLabel = "Override Subscription Settings",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Button.clickSave();

		AssertVisible(locator1 = "Message#SUCCESS");

		AssertNotVisible(
			key_entryName = "Payment Subscription",
			locator1 = "CommerceEntry#ENTRY_SUBSCRIPTIONS");

		AssertNotVisible(
			key_entryName = "Delivery Subscription",
			locator1 = "CommerceEntry#ENTRY_SUBSCRIPTIONS");
	}

	@description = "This is a test for COMMERCE-11084. Admin can add price lists on a product's SKU details page"
	@priority = 5
	test CanAddPriceListsOnProductSKU {
		property portal.acceptance = "true";

		task ("Given a Minium site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And a simple product with 'Minium' catalog is created") {
			CommerceJSONProductsAPI._addCommerceProduct(
				catalogName = "Minium",
				productName = "Test Simple Product",
				productType = "Simple",
				sku = "SIMPLESKU");
		}

		task ("When admin adds some price lists on the product's SKU details page") {
			CommerceProducts.openProductsAdmin();

			CommerceNavigator.searchEntry(entryName = "Simple");

			CommerceNavigator.gotoEntry(entryName = "Test Simple Product");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceEntry.addPriceListsFromProductSKU(
				priceListNames = "Master Base Price List,Master Base Promotion",
				skuName = "SIMPLESKU");
		}

		task ("Then the price lists are added successfully") {
			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			for (var priceListName : list "Master Base Price List,Master Base Promotion") {
				AssertElementPresent(
					key_entryName = ${priceListName},
					locator1 = "CommerceNavigation#ENTRY_NAME");
			}
		}
	}

	@description = "This is a test for COMMERCE-12218. Admin can add tier price on a product's SKU details page"
	@priority = 5
	test CanAddTierPriceEntriesOnProductSKU {
		property portal.acceptance = "true";

		task ("Given a Minium site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And a simple product with 'Minium' catalog is created") {
			CommerceJSONProductsAPI._addCommerceProduct(
				catalogName = "Minium",
				productName = "Test Simple Product",
				productType = "Simple",
				sku = "SIMPLESKU");
		}

		task ("When admin adds a tier price on the product's SKU details page") {
			CommerceProducts.openProductsAdmin();

			CommerceNavigator.searchEntry(entryName = "Simple");

			CommerceNavigator.gotoEntry(entryName = "Test Simple Product");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoEntry(entryName = "SIMPLESKU");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceEntry.gotoMenuTab(menuTab = "Price Lists");

			CommerceNavigator.gotoEntry(entryName = "Minium Base Price List");

			CommercePriceLists.createTierPriceEntryDirectlyInsideProductSKU(
				price = 10,
				quantity = 1);
		}

		task ("Then the tier price is successfully added") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/catalog");

			AssertTextEquals.assertPartialText(
				key_productName = "Test Simple Product",
				locator1 = "CommerceEntry#PRODUCT_CARD_LIST_PRICE",
				value1 = 10);
		}
	}

	@description = "This is a test for COMMERCE-12218. Admin can delete price lists on a product's SKU details page"
	@priority = 5
	test CanDeletePriceListsOnProductSKU {
		property portal.acceptance = "true";

		task ("Given a Minium site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And a simple product with 'Minium' catalog is created") {
			CommerceJSONProductsAPI._addCommerceProduct(
				catalogName = "Minium",
				productName = "Test Simple Product",
				productType = "Simple",
				sku = "SIMPLESKU");
		}

		task ("When admin delete a price list on the product's SKU details page") {
			CommerceProducts.openProductsAdmin();

			CommerceNavigator.searchEntry(entryName = "Simple");

			CommerceNavigator.gotoEntry(entryName = "Test Simple Product");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoEntry(entryName = "SIMPLESKU");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceEntry.gotoMenuTab(menuTab = "Price Lists");

			CommerceEntry.clickEntryDropdownMenuItem(
				entryName = "Minium Base Price List",
				menuItem = "Delete");

			AssertElementNotPresent(
				key_entryName = "Minium Base Price List",
				locator1 = "CommerceNavigation#ENTRY_NAME");
		}

		task ("Then the price list is successfully deleted") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/catalog");

			AssertTextEquals.assertPartialText(
				key_productName = "Test Simple Product",
				locator1 = "CommerceEntry#PRODUCT_CARD_LIST_PRICE",
				value1 = 00);
		}
	}

	@description = "This is a test for COMMERCE-12218. Admin can delete tier price on a product's SKU details page"
	@priority = 5
	test CanDeleteTierPriceEntriesOnProductSKU {
		property portal.acceptance = "true";

		task ("Given a Minium site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And a simple product with 'Minium' catalog is created") {
			CommerceJSONProductsAPI._addCommerceProduct(
				catalogName = "Minium",
				productName = "Test Simple Product",
				productType = "Simple",
				sku = "SIMPLESKU");
		}

		task ("When admin adds a tier price on the product's SKU details page") {
			CommerceProducts.openProductsAdmin();

			CommerceNavigator.searchEntry(entryName = "Simple");

			CommerceNavigator.gotoEntry(entryName = "Test Simple Product");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoEntry(entryName = "SIMPLESKU");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceEntry.gotoMenuTab(menuTab = "Price Lists");

			CommerceNavigator.gotoEntry(entryName = "Minium Base Price List");

			CommercePriceLists.createTierPriceEntryDirectlyInsideProductSKU(
				price = 10,
				quantity = 1);

			SelectFrameTop();
		}

		task ("And the Tier Price is deleted") {
			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoEntry(entryName = "SIMPLESKU");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceEntry.gotoMenuTab(menuTab = "Price Lists");

			CommerceNavigator.gotoEntry(entryName = "Minium Base Price List");

			SelectFrame.selectFrame(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			Click(
				key_panel = "Details",
				locator1 = "Panel#PANEL_COLLAPSED");

			CommerceEntry.gotoMenuTab(menuTab = "Tier Price Entries");

			CommerceEntry.clickEntryDropdownMenuItem(
				entryName = 10,
				menuItem = "Delete");
		}

		task ("Then the tier price is not applied anymore") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/catalog");

			AssertTextEquals.assertPartialText(
				key_productName = "Test Simple Product",
				locator1 = "CommerceEntry#PRODUCT_CARD_LIST_PRICE",
				value1 = 00);
		}
	}

	@description = "This is a test for COMMERCE-12218. Admin can edit price lists on a product's SKU details page"
	@priority = 5
	test CanEditPriceListsOnProductSKU {
		property portal.acceptance = "true";

		task ("Given a Minium site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And a simple product with 'Minium' catalog is created") {
			CommerceJSONProductsAPI._addCommerceProduct(
				catalogName = "Minium",
				productName = "Test Simple Product",
				productType = "Simple",
				sku = "SIMPLESKU");
		}

		task ("When admin edit a price list on the product's SKU details page") {
			CommerceProducts.openProductsAdmin();

			CommerceNavigator.searchEntry(entryName = "Simple");

			CommerceNavigator.gotoEntry(entryName = "Test Simple Product");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoEntry(entryName = "SIMPLESKU");

			CommerceEntry.editPriceListsFromProductSKU(
				price = "25.00",
				priceList = "Minium Base Price List",
				skuName = "SIMPLESKU");
		}

		task ("Then the price list is edited successfully") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/catalog");

			AssertTextEquals.assertPartialText(
				key_productName = "Test Simple Product",
				locator1 = "CommerceEntry#PRODUCT_CARD_LIST_PRICE",
				value1 = "25.00");
		}
	}

	@description = "This is a test for COMMERCE-9891 UI to show External Reference code of SKU"
	@priority = 3
	test CanEditSKUERC {
		property portal.acceptance = "false";

		task ("Given a Minium site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And admin is on the SKUs tab of the Products") {
			CommerceNavigator.gotoPortlet(
				category = "Product Management",
				portlet = "Products");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");
		}

		task ("And clicks a product SKU") {
			CommerceNavigator.searchEntry(entryName = "MIN93015");

			CommerceNavigator.gotoTableListEntry(entryName = "MIN93015");
		}

		task ("When edits and publishes a new ERC value for the SKU") {
			CommerceSKUs.editSkuERC(
				publish = "true",
				skuERC = "Test ERC");
		}

		task ("Then verifies that the SKU ERC is updated successfully") {
			AssertTextEquals(
				locator1 = "CommerceEntry#SKU_ERC_FIELD",
				value1 = "Test ERC");
		}
	}

	@description = "This is a test for COMMERCE-9891 UI to show External Reference code of SKU"
	@priority = 3
	test CanEditSKUERCOfANewProduct {
		property portal.acceptance = "false";

		task ("Given a Minium site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And admin creates a new Simple Product") {
			CommerceNavigator.gotoPortlet(
				category = "Product Management",
				portlet = "Products");

			CPCommerceCatalog.newProductsEntry(
				productCatalog = "Minium",
				productName = "Simple T-Shirt",
				productType = "Simple");
		}

		task ("And admin goes to the SKUs tab of the new product and clicks default SKU") {
			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			Click(
				key_value = "default",
				locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS");

			MenuItem.click(menuItem = "Edit");
		}

		task ("When edits and publishes a new ERC value for the SKU") {
			CommerceSKUs.editSkuERC(
				publish = "true",
				skuERC = "New ERC");
		}

		task ("Then verifies that the SKU ERC is updated successfully") {
			AssertTextEquals(
				locator1 = "CommerceEntry#SKU_ERC_FIELD",
				value1 = "New ERC");
		}
	}

	@description = "This is a test for COMMERCE-12218. Admin can edit tier price on a product's SKU details page"
	@priority = 5
	test CanEditTierPriceEntriesOnProductSKU {
		property portal.acceptance = "true";

		task ("Given a Minium site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And a simple product with 'Minium' catalog is created") {
			CommerceJSONProductsAPI._addCommerceProduct(
				catalogName = "Minium",
				productName = "Test Simple Product",
				productType = "Simple",
				sku = "SIMPLESKU");
		}

		task ("When admin adds a tier price on the product's SKU details page") {
			CommerceProducts.openProductsAdmin();

			CommerceNavigator.searchEntry(entryName = "Simple");

			CommerceNavigator.gotoEntry(entryName = "Test Simple Product");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoEntry(entryName = "SIMPLESKU");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceEntry.gotoMenuTab(menuTab = "Price Lists");

			CommerceNavigator.gotoEntry(entryName = "Minium Base Price List");

			CommercePriceLists.createTierPriceEntryDirectlyInsideProductSKU(
				price = 10,
				quantity = 1);

			SelectFrameTop();
		}

		task ("And the Tier Price is edited") {
			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoEntry(entryName = "SIMPLESKU");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceEntry.gotoMenuTab(menuTab = "Price Lists");

			CommerceNavigator.gotoEntry(entryName = "Minium Base Price List");

			CommercePriceLists.editTierPriceEntryDirectlyInsideProductSKU(
				entryName = 10,
				price = 20,
				quantity = 1);
		}

		task ("Then the tier price is edited successfully") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/catalog");

			AssertTextEquals.assertPartialText(
				key_productName = "Test Simple Product",
				locator1 = "CommerceEntry#PRODUCT_CARD_LIST_PRICE",
				value1 = 20);
		}
	}

	@description = "This is a test for COMMERCE-9891 UI to show External Reference code of SKU"
	@priority = 5
	test CanNotUseTheSameSKUERCForDifferentSKU {
		property portal.acceptance = "true";

		task ("Given a Minium site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And admin edits and publishes SKU ERC of a product") {
			CommerceNavigator.gotoPortlet(
				category = "Product Management",
				portlet = "Products");

			CommerceNavigator.searchEntry(entryName = "ABS Sensor");

			CommerceNavigator.gotoTableListEntry(entryName = "ABS Sensor");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			Click(
				key_value = "MIN93015",
				locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS");

			MenuItem.click(menuItem = "Edit");

			CommerceSKUs.editSkuERC(
				closeFrame = "true",
				publish = "true",
				skuERC = "Test ERC");
		}

		task ("When enters the same ERC value to another product and clicks Publish") {
			Click(locator1 = "CommerceNavigation#BACK");

			CommerceNavigator.searchEntry(entryName = "U-Joint");

			CommerceNavigator.gotoTableListEntry(entryName = "U-Joint");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			Click(
				key_value = "MIN55861",
				locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS");

			MenuItem.click(menuItem = "Edit");

			CommerceSKUs.editSkuERC(
				publish = "true",
				skuERC = "Test ERC");
		}

		task ("Then verifies that the same ERC cannot be given twice and an error message appears") {
			AssertElementNotPresent(locator1 = "Message#SUCCESS");

			AssertTextEquals.assertText(
				locator1 = "Message#ERROR",
				value1 = "Close Error:There is already one SKU with the external reference code.");
		}
	}

	@description = "This is a test for COMMERCE-10604. Can patch a SKU's ERC via API"
	@priority = 3
	test CanPatchSKUERCViaAPI {
		property portal.acceptance = "false";

		var skuId = CommerceJSONProductsAPI._getSKUId(productSKU = "MIN93015");

		task ("Given a Minium site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And a default ERC 'MIN93015minium-initializer' for 'MIN93015' product is already set") {
			CommerceProducts.openProductsAdmin();

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "MIN93015");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			AssertTextEquals(
				locator1 = "CommerceEntry#SKU_ERC_FIELD",
				value1 = "MIN93015minium-initializer");
		}

		task ("When a null values is patched and passed via API") {
			CommerceJSONProductsAPI._patchCommerceSku(
				externalReferenceCode = "",
				productSku = "MIN93015");
		}

		task ("Then the ERC of the product is not updated but the default value") {
			CommerceProducts.openProductsAdmin();

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "MIN93015");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			AssertTextEquals(
				locator1 = "CommerceEntry#SKU_ERC_FIELD",
				value1 = "MIN93015minium-initializer");
		}

		task ("When an empty string value is patched and passed via API") {
			CommerceJSONProductsAPI._patchCommerceSku(
				externalReferenceCode = " ",
				productSku = "MIN93015");
		}

		task ("Then the ERC of the product is not updated but the default value") {
			CommerceProducts.openProductsAdmin();

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "MIN93015");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			AssertTextEquals(
				locator1 = "CommerceEntry#SKU_ERC_FIELD",
				value1 = "MIN93015minium-initializer");
		}

		task ("When a non-empty string value is patched and passed via API") {
			CommerceJSONProductsAPI._patchCommerceSku(
				externalReferenceCode = "test",
				productSku = "MIN93015");
		}

		task ("Then the ERC of the product is updated") {
			CommerceProducts.openProductsAdmin();

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "MIN93015");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			AssertTextEquals(
				locator1 = "CommerceEntry#SKU_ERC_FIELD",
				value1 = "test");
		}
	}

	@description = "This is a test for COMMERCE-12218. Admin can view channel currency matches catalog currency but doesn't change the price list on a product's SKU details page"
	@priority = 5
	test CanViewChannelCurrencyDoesntChangePriceListOnProductSKU {
		property portal.acceptance = "true";

		task ("Given a Minium site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And a simple product with 'Minium' catalog is created") {
			CommerceJSONProductsAPI._addCommerceProduct(
				catalogName = "Minium",
				productName = "Test Simple Product",
				productType = "Simple",
				sku = "SIMPLESKU");
		}

		task ("And the admin checks the currency of the product's SKU details page") {
			CommerceProducts.openProductsAdmin();

			CommerceNavigator.searchEntry(entryName = "Simple");

			CommerceNavigator.gotoEntry(entryName = "Test Simple Product");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoEntry(entryName = "SIMPLESKU");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceEntry.gotoMenuTab(menuTab = "Price Lists");

			CommerceNavigator.gotoEntry(entryName = "Minium Base Price List");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			AssertElementPresent(
				key_currency = "USD",
				locator1 = "CommerceEntry#CHECK_PRICE_LIST_CURRENCY");
		}

		task ("When the admin changes the currency on the Channel Admin pages") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			CommerceEntry.viewChannelsEntry(
				channelCurrency = "US Dollar",
				channelName = "Minium Portal",
				channelType = "Site");

			CommerceEntry.gotoMenuTab(menuTab = "General");

			Select(
				key_fieldLabel = "Currency",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Euro");

			Button.clickSave();
		}

		task ("Then the currency is not updated on the the price list inside the product's SKU details page ") {
			CommerceProducts.openProductsAdmin();

			CommerceNavigator.searchEntry(entryName = "Simple");

			CommerceNavigator.gotoEntry(entryName = "Test Simple Product");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoEntry(entryName = "SIMPLESKU");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceEntry.gotoMenuTab(menuTab = "Price Lists");

			CommerceNavigator.gotoEntry(entryName = "Minium Base Price List");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			AssertElementPresent(
				key_currency = "USD",
				locator1 = "CommerceEntry#CHECK_PRICE_LIST_CURRENCY");
		}

		task ("And the currency on the catalogue is updated") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/catalog");

			AssertTextEquals.assertPartialText(
				key_productName = "Test Simple Product",
				locator1 = "CommerceEntry#PRODUCT_CARD_LIST_PRICE",
				value1 = "€ 0.00");
		}
	}

	@description = "This is a test for COMMERCE-12218. Admin can view Price List currency matches currency on a product's SKU details page"
	@priority = 5
	test CanViewPriceListCurrencyMatchesPriceListCurrencyOnProductSKU {
		property portal.acceptance = "true";

		task ("Given a Minium site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And a simple product with 'Minium' catalog is created") {
			CommerceJSONProductsAPI._addCommerceProduct(
				catalogName = "Minium",
				productName = "Test Simple Product",
				productType = "Simple",
				sku = "SIMPLESKU");
		}

		task ("And the admin checks the currency of the product's SKU details page") {
			CommerceProducts.openProductsAdmin();

			CommerceNavigator.searchEntry(entryName = "Simple");

			CommerceNavigator.gotoEntry(entryName = "Test Simple Product");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoEntry(entryName = "SIMPLESKU");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceEntry.gotoMenuTab(menuTab = "Price Lists");

			CommerceNavigator.gotoEntry(entryName = "Minium Base Price List");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			AssertElementPresent(
				key_currency = "USD",
				locator1 = "CommerceEntry#CHECK_PRICE_LIST_CURRENCY");
		}

		task ("When the admin edits the Price List currency") {
			CommerceNavigator.goToPriceListAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Base Price List");

			Select(
				key_fieldLabel = "Currency",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "EUR");

			Button.clickPublish();
		}

		task ("Then the currency is updated inside the product's SKU details page ") {
			CommerceProducts.openProductsAdmin();

			CommerceNavigator.searchEntry(entryName = "Simple");

			CommerceNavigator.gotoEntry(entryName = "Test Simple Product");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoEntry(entryName = "SIMPLESKU");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceEntry.gotoMenuTab(menuTab = "Price Lists");

			CommerceNavigator.gotoEntry(entryName = "Minium Base Price List");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			AssertElementPresent(
				key_currency = "EUR",
				locator1 = "CommerceEntry#CHECK_PRICE_LIST_CURRENCY");
		}
	}

	@description = "This is a test for COMMERCE-6022. EditASKU"
	@priority = 3
	test EditASKU {
		property portal.acceptance = "false";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Minium",
			productName = "Simple T-Shirt",
			productType = "Simple");

		CommerceEntry.gotoMenuTab(menuTab = "SKUs");

		Click(locator1 = "Button#PLUS");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Type(
			locator1 = "CommerceEntry#SKU_FIELD",
			value1 = "BLACKSKU");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Purchasable",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		CommerceSKUs.addPriceToSKU(price = "10.0");

		Button.clickPublish();

		AssertVisible(locator1 = "Message#SUCCESS");

		Click(locator1 = "CommerceEntry#MODAL_BUTTON_CLOSE");

		SelectFrame.selectFrameTop();

		CommerceNavigator.gotoEntry(entryName = "BLACKSKU");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Type(
			locator1 = "CommerceEntry#SKU_FIELD",
			value1 = "REDSKU");

		CommerceSKUs.addPriceToSKU(price = "20.0");

		Button.clickPublish();

		AssertVisible(locator1 = "Message#SUCCESS");

		Click(locator1 = "CommerceEntry#MODAL_BUTTON_CLOSE");

		SelectFrame.selectFrameTop();

		CommerceNavigator.gotoEntry(entryName = "REDSKU");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		AssertElementPresent(
			locator1 = "CommerceEntry#SKU_FIELD",
			value1 = "REDSKU");

		AssertElementPresent(
			locator1 = "CommerceEntry#PRICE_FIELD",
			value1 = "20.0");

		Button.clickPublish();

		AssertVisible(locator1 = "Message#SUCCESS");

		SelectFrame.selectFrameTop();
	}

	@description = "This is a test for COMMERCE-6023. RemoveASKU"
	@priority = 5
	test RemoveASKU {
		property portal.acceptance = "true";

		// TODO Review

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Simple T-Shirt",
			productType = "Simple");

		CommerceEntry.gotoMenuTab(menuTab = "SKUs");

		CommerceSKUs.addSKU(
			noOption = "true",
			optionValuesList = "BLACK:10.0");

		Alert.viewSuccessMessage();

		if (IsElementPresent(locator1 = "//a[contains(text(),'BLACKSKU')]")) {
			CommerceEntry.deleteCommerceEntry();
		}

		Alert.viewSuccessMessage();
	}

	@description = "[Please Update]"
	@ignore = "true"
	@priority = 4
	test VerifyIfSaveAndSaveAsDraftButtonsAreNotPresent {

		// TODO COMMERCE-7074 VerifyIfSaveAndSaveAsDraftButtonsAreNotPresent

	}

}
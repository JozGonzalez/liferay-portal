@component-name = "portal-commerce"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false${line.separator}feature.flag.COMMERCE-9410=true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Shopping Experience";

	setUp {
		CommerceConfiguration.commerceSetUp(minium = "true");

		task ("Setup: Create an account with a buyer user") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "Verify that order fields values are mapped to fragments."
	@priority = 5
	test CanUseCommerceOrderFieldsWithFragments {
		property portal.acceptance = "true";

		task ("Given buyer user logs in and completes an order with checkout") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 1);

			CommerceCheckout.gotoCheckoutViaMiniCart();

			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = 1,
				productUnitPrice = 24,
				shippingMethod = "Standard");

			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");
		}

		task ("And a new Commerce Order type display page template with fragments is created and mapped with the order related fields") {
			CommerceDisplayPageTemplates.addMappedDisplayPageTemplateEntry(
				contentType = "Commerce Order",
				displayPageName = "Test Commerce Order Display Page Template",
				fieldsList = "Account Name,Order Status,User Name,Formatted Total Amount,Approved",
				fragmentName = "Heading",
				groupName = "Minium",
				siteURLKey = "minium");
		}

		task ("And 'Select Other Item...' is clicked from the dropdown of 'Preview With' and the placed order is chosen from the Orders tab") {
			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Test Commerce Order Display Page Template");

			Click(locator1 = "ControlMenu#DISPLAY_PAGE_PREVIEW_ITEM_SELECTOR");

			DropdownMenuItem.click(menuItem = "Select Other Item");

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			var orderId = CommerceJSONOrdersAPI._getCommerceOrder();

			Click(
				key_entryName = ${orderId},
				locator1 = "ObjectAdmin#VIEW_ENTRY_NAME_ON_PAGE");
		}

		task ("Then it is verified that the mapped fragments for that order are listed") {
			SelectFrameTop();

			for (var entry : list "Commerce Account,1,Buyer User,$ 39.00,true") {
				AssertElementPresent(
					key_text = ${entry},
					locator1 = "Fragment#EDITABLE_FIELD_CONTENT");
			}
		}
	}

}
@component-name = "portal-commerce"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Product Info Management";

	setUp {
		CommerceConfiguration.commerceSetUp(minium = "true");
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "COMMERCE-12107 Verify that is possible to use the categories as a Content Provider and that by adding a category of which the product itself belongs, it does not see itself in the list generated by the Provider"
	@priority = 5
	test CanNotViewItselfIntoTheExternallyDefinedProductsList {
		property portal.acceptance = "true";

		task ("Given the admin open the U-Joint Product via Admin") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "U-Joint");
		}

		task ("And a new option is created") {
			CommerceJSONOptionsAPI._addCommerceOption(
				fieldType = "select",
				optionKey = "option-select-from-list",
				optionName = "Option Select from List");
		}

		task ("And is linked to the product") {
			CommerceJSONOptionsAPI._assignOptionToCommerceProduct(
				fieldType = "select",
				optionKey = "option-select-from-list",
				optionName = "Option Select from List",
				productName = "U-Joint");
		}

		task ("When the admin enable the Define Externally toggle with a category") {
			CommerceEntry.gotoMenuTab(menuTab = "Options");

			CommerceProductOptions.editProductOption(
				collectionProvider = "SKUs by Categories",
				key_option = "Option Select from List",
				key_priceType = "Dynamic",
				productAddOptionCategoriesList = "Transmission",
				productOptionDefineExternally = "true",
				productOptionPriceType = "true");
		}

		task ("Then all the products related to that category are added except for U-Joint") {
			for (var productEntry : list "CV Axles,Drive Shafts,Mount,Torque Converters,Transmission Cooler Line Assembly,Transmission Fluid,Universal CV Boot,Wheel Seal - Front") {
				AssertElementPresent(
					key_entryName = ${productEntry},
					locator1 = "CommerceEntry#TABLE_ELIGIBILITY_ACCOUNT_GROUPS");

				echo("The product ${productEntry} is present");
			}

			AssertElementNotPresent(
				key_entryName = "U-Joint",
				locator1 = "CommerceEntry#TABLE_ELIGIBILITY_ACCOUNT_GROUPS");

			echo("The product U-Joint is not present");
		}
	}

	@description = "COMMERCE-12110 Verify that when we configure an option both manually or using the define externally toggle, when the toggle is enabled or disabled the past configurations are remembered"
	@priority = 5
	test CanTheManuallySelectConfigurationIsRemembered {
		property portal.acceptance = "true";

		task ("Given the admin open the U-Joint Product via Admin") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "U-Joint");
		}

		task ("And a new option is created") {
			CommerceJSONOptionsAPI._addCommerceOption(
				fieldType = "select",
				optionKey = "option-select-from-list",
				optionName = "Option Select from List",
				optionValues = "value1:value1:1,value2:value2:2,value3:value3:3");
		}

		task ("And is linked to the product") {
			CommerceJSONOptionsAPI._assignOptionToCommerceProduct(
				fieldType = "select",
				optionKey = "option-select-from-list",
				optionName = "Option Select from List",
				productName = "U-Joint");
		}

		task ("And the admin check if all the option values are there") {
			CommerceEntry.gotoMenuTab(menuTab = "Options");

			Click(
				key_index = "Option Select from List",
				locator1 = "WorkflowMetrics#SEARCH_FIELD_MAPPINGS_METRICS_INDEXES");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			for (var optionValueEntry : list "value1,value2,value3") {
				AssertElementPresent(
					key_entryName = ${optionValueEntry},
					locator1 = "CommerceEntry#TABLE_ELIGIBILITY_ACCOUNT_GROUPS");
			}

			Click(locator1 = "Icon#CLOSE");

			SelectFrame.selectFrameTop();
		}

		task ("And enable the toggle Define Externally toggle with a category") {
			CommerceProductOptions.editProductOption(
				collectionProvider = "SKUs by Categories",
				key_option = "Option Select from List",
				key_priceType = "Dynamic",
				productAddOptionCategoriesList = "Transmission",
				productOptionDefineExternally = "true",
				productOptionPriceType = "true");

			for (var productEntry : list "CV Axles,Drive Shafts,Mount") {
				AssertElementPresent(
					key_entryName = ${productEntry},
					locator1 = "CommerceEntry#TABLE_ELIGIBILITY_ACCOUNT_GROUPS");
			}
		}

		task ("When the toggle Define Externally is disabled") {
			Uncheck.uncheckNotVisible(
				key_toggleSwitchLabel = "Define Externally",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			Button.clickSave();
		}

		task ("Then all the previous manually defined option values are still remembered") {
			for (var optionValueEntry : list "value1,value2,value3") {
				AssertElementPresent(
					key_entryName = ${optionValueEntry},
					locator1 = "CommerceEntry#TABLE_ELIGIBILITY_ACCOUNT_GROUPS");
			}
		}

		task ("But if the toggle Define Externally is enabled again") {
			Check.checkNotVisible(
				key_toggleSwitchLabel = "Define Externally",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			Button.clickSave();
		}

		task ("Then the previous configuration defined by the Provider is still remembered") {
			for (var productEntry : list "CV Axles,Drive Shafts,Mount,Torque Converters,Transmission Cooler Line Assembly,Transmission Fluid,Universal CV Boot,Wheel Seal - Front") {
				AssertElementPresent(
					key_entryName = ${productEntry},
					locator1 = "CommerceEntry#TABLE_ELIGIBILITY_ACCOUNT_GROUPS");
			}
		}
	}

	@description = "COMMERCE-12109 Verify that is possible to use multiple categories"
	@priority = 4
	test CanUseMultipleCategories {
		property portal.acceptance = "false";

		task ("Given the admin open the U-Joint Product via Admin") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "ABS Sensor");
		}

		task ("And add the category Turbocharger to ABS Sensor") {
			AssetCategorization.addCategory(
				categoryName = "Turbocharger",
				vocabularyName = "Minium");

			Button.clickPublish();
		}

		task ("And a new option is created") {
			CommerceJSONOptionsAPI._addCommerceOption(
				fieldType = "select",
				optionKey = "option-select-from-list",
				optionName = "Option Select from List");
		}

		task ("And is linked to the product") {
			CommerceJSONOptionsAPI._assignOptionToCommerceProduct(
				fieldType = "select",
				optionKey = "option-select-from-list",
				optionName = "Option Select from List",
				productName = "U-Joint");
		}

		task ("And the admin opens the U-Joint") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "U-Joint");
		}

		task ("When the admin enable the Define Externally toggle with a category") {
			CommerceEntry.gotoMenuTab(menuTab = "Options");

			CommerceProductOptions.editProductOption(
				collectionProvider = "SKUs by Categories",
				key_option = "Option Select from List",
				key_priceType = "Dynamic",
				productAddOptionCategoriesList = "Transmission,Turbocharger",
				productOptionDefineExternally = "true",
				productOptionPriceType = "true");
		}

		task ("Then all the products related to categories are added") {
			for (var productEntry : list "CV Axles,Drive Shafts,Mount,Torque Converters,Transmission Cooler Line Assembly,Transmission Fluid,Universal CV Boot,Wheel Seal - Front,ABS Sensor") {
				AssertElementPresent(
					key_entryName = ${productEntry},
					locator1 = "CommerceEntry#TABLE_ELIGIBILITY_ACCOUNT_GROUPS");

				echo("The product ${productEntry} is present");
			}
		}

		task ("But if the admin remove the Turbocharger category") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "ABS Sensor");

			AssetCategorization.removeCategories(categoryNameList = "Turbocharger");

			Button.clickPublish();
		}

		task ("Then ABS Sensor will not be present anymore inside U-Joint option") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "U-Joint");

			CommerceEntry.gotoMenuTab(menuTab = "Options");

			Click(
				key_index = "Option Select from List",
				locator1 = "WorkflowMetrics#SEARCH_FIELD_MAPPINGS_METRICS_INDEXES");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			AssertElementNotPresent(
				key_entryName = "ABS Sensor",
				locator1 = "CommerceEntry#TABLE_ELIGIBILITY_ACCOUNT_GROUPS");

			echo("The product ABS Sensor is not present anymore");
		}
	}

	@description = "COMMERCE-12096 Verify that the visibility affect the eligibility of the SKU"
	@priority = 4
	test CanViewOnlyValidSKUsAreListedAsExternallyDefinedProductsVisibility {
		property portal.acceptance = "false";

		task ("Given the admin open the U-Joint Product via Admin") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "U-Joint");
		}

		task ("And a new option is created") {
			CommerceJSONOptionsAPI._addCommerceOption(
				fieldType = "select",
				optionKey = "option-select-from-list",
				optionName = "Option Select from List");
		}

		task ("And is linked to the product") {
			CommerceJSONOptionsAPI._assignOptionToCommerceProduct(
				fieldType = "select",
				optionKey = "option-select-from-list",
				optionName = "Option Select from List",
				productName = "U-Joint");
		}

		task ("When the admin enable the Define Externally toggle with the Turbocharger category") {
			CommerceEntry.gotoMenuTab(menuTab = "Options");

			CommerceProductOptions.editProductOption(
				collectionProvider = "SKUs by Categories",
				key_option = "Option Select from List",
				key_priceType = "Dynamic",
				productAddOptionCategoriesList = "Turbocharger",
				productOptionDefineExternally = "true",
				productOptionPriceType = "true");
		}

		task ("Then no product is present") {
			AssertElementNotPresent(
				key_entryName = "Turbocharger",
				locator1 = "CommerceEntry#TABLE_ELIGIBILITY_ACCOUNT_GROUPS");

			echo("The product Turbocharger is not present");
		}

		task ("When the admin disable the visibility for Turbocharger") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "Turbocharger");

			CommerceEntry.gotoMenuTab(menuTab = "Visibility");

			Click(
				key_name = "Account Groups",
				locator1 = "ToggleSwitch#ENABLE_SPECIFIC_TOGGLE_SWITCH");

			Button.clickPublish();
		}

		task ("Then now tubocharger is present inside the U-Joint option") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "U-Joint");

			CommerceEntry.gotoMenuTab(menuTab = "Options");

			Click(
				key_index = "Option Select from List",
				locator1 = "WorkflowMetrics#SEARCH_FIELD_MAPPINGS_METRICS_INDEXES");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			AssertElementPresent(
				key_entryName = "Turbocharger",
				locator1 = "CommerceEntry#TABLE_ELIGIBILITY_ACCOUNT_GROUPS");

			echo("The product Turbocharger is present");
		}
	}

}